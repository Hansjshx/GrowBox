[
    {
        "id": "691b89143e2e3469",
        "type": "tab",
        "label": "Grow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ab4cce5dbdb9f28",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Messungen",
        "info": "",
        "x": 130,
        "y": 20,
        "wires": []
    },
    {
        "id": "deb2f4c32f1468ab",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Geräte",
        "info": "",
        "x": 90,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1683e5b69cab08f9",
        "type": "eztimer",
        "z": "691b89143e2e3469",
        "name": "",
        "debug": false,
        "autoname": "19:00:00 + 12:00:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": true,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "19:00:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "bool",
        "onvalue": "true",
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": true,
        "offtype": "3",
        "offtimesun": "dusk",
        "offtimetod": "dusk",
        "offduration": "12:00:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "bool",
        "offvalue": "false",
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": true,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 1020,
        "y": 880,
        "wires": [
            [
                "0d6787d4e97cb4eb",
                "a0f05ce619debe34",
                "877d92e01edc6318"
            ]
        ]
    },
    {
        "id": "2c2c24690c19c08c",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "payload.suspended",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.suspended",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 820,
        "wires": [
            [
                "1683e5b69cab08f9",
                "e6fdc0b78e7a72cd"
            ]
        ]
    },
    {
        "id": "b80fdff3981bc21e",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "12h",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "12:00:00",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "5ffa7adfc8ea6142"
            ]
        ]
    },
    {
        "id": "4f9b49a5beb37e33",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "payload.ontime",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ontime",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 920,
        "wires": [
            [
                "1683e5b69cab08f9"
            ]
        ]
    },
    {
        "id": "1df30ecb15957ae3",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "payload.duration",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.duration",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 880,
        "wires": [
            [
                "1683e5b69cab08f9"
            ]
        ]
    },
    {
        "id": "22e3501f3030c82f",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "19:00:00",
        "payloadType": "str",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "075cb8db0d3bc90e"
            ]
        ]
    },
    {
        "id": "42d8d266b3d85a02",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "Charts löschen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "0d6787d4e97cb4eb",
        "type": "deconz-output",
        "z": "691b89143e2e3469",
        "name": "Beleuchtung",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/00:12:4b:00:2f:8d:7f:4d-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "after_command",
                "value": ""
            }
        },
        "x": 1370,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "0d8faa205a6fac34",
        "type": "Tasmota Sensor",
        "z": "691b89143e2e3469",
        "broker": "0dfca726873e1d5f",
        "device": "GrowBox",
        "name": "Growtemp",
        "outputs": 1,
        "uidisabler": false,
        "fullTopic": "",
        "cmndPrefix": "",
        "statPrefix": "",
        "telePrefix": "",
        "qos": "1",
        "retain": "false",
        "rules": [],
        "outputTopic": "",
        "x": 310,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ca4ccf15c8135569",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "0d8faa205a6fac34"
            ]
        ]
    },
    {
        "id": "cb6aac061fd498e9",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Lichtstärke",
        "func": "msg.payload = Math.round(msg.payload.BH1750.Illuminance * 1.5813953488);\nmsg.topic = \"Lichtstärke\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1520,
        "wires": [
            [
                "b49d2ca6521a28ca",
                "86b31eff6b66ec4a",
                "fcf8e5e447584bf3"
            ]
        ]
    },
    {
        "id": "5ee076237f44de8d",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Luftdruck",
        "func": "msg.payload = msg.payload.BME280.Pressure;\nmsg.topic = \"Luftdruck\";\nglobal.set(\"pressure\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "7548fad0e7f7a5e1",
                "c5d0eb479be70ab7"
            ]
        ]
    },
    {
        "id": "35610b19ede0ed51",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "d5219cd5b175b899"
            ]
        ]
    },
    {
        "id": "c25162fbfe7cd7b3",
        "type": "mqtt in",
        "z": "691b89143e2e3469",
        "name": "GrowBox",
        "topic": "tele/GrowBox/SENSOR",
        "qos": "2",
        "datatype": "json",
        "broker": "c42db77c4620d462",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1520,
        "wires": [
            [
                "cb6aac061fd498e9"
            ]
        ]
    },
    {
        "id": "36cac549b8289671",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "Charts löschen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1120,
        "y": 1420,
        "wires": [
            [
                "965aab5f2e216386",
                "16a1fb89e051b85d"
            ]
        ]
    },
    {
        "id": "c754bad0ea5cf3fa",
        "type": "catch",
        "z": "691b89143e2e3469",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 940,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "99d095a40deb9815",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "bool2bin",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Lüftung",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 700,
        "wires": [
            [
                "63644df81d7325d7"
            ]
        ]
    },
    {
        "id": "46e8d9a2ad9e08a8",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "bool2bin",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Beleuchtung",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "19e0fa3324956b56"
            ]
        ]
    },
    {
        "id": "ed1577c97a6fb6ec",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "SVP/VPD berechnen",
        "func": "let T_air = msg.payload.Temperature || 25; // Standardwert 25°C\nlet T_leaf = T_air; // LED Luft=Blatt - 2; // Blatttemperatur = Lufttemperatur - 2°C\nlet RH = msg.payload.Humidity; // Luftfeuchtigkeit runden, ggf. runden mit Math.round(RH)\n\n// Berechnung des Sättigungsdampfdrucks\nlet SVP_air = 0.611 * Math.exp((17.502 * T_air) / (T_air + 240.97)); // Sättigungsdampfdruck der Luft\nlet SVP_leaf = 0.611 * Math.exp((17.502 * T_leaf) / (T_leaf + 240.97)); // Sättigungsdampfdruck der Blätter\n\n// Berechnung des tatsächlichen Dampfdrucks (AVP)\nlet AVP = SVP_air * (RH / 100);\n\n// Berechnung des Dampfdruckdefizits (VPD)\nlet VPD = SVP_leaf - AVP; // VPD = SVP_leaf - AVP\n\n// Rückgabe von msg.payload\nmsg.payload = {\n    air_temp: T_air,\n    leaf_temp: T_leaf,\n    humidity: RH,\n    svp_air: SVP_air.toFixed(3),\n    svp_leaf: SVP_leaf.toFixed(3),\n    vpd: VPD.toFixed(3)\n};\n\n// Setze den VPD-Wert als globale Variable\nglobal.set(\"vpd\", msg.payload.vpd);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 140,
        "wires": [
            [
                "a99501f4c79a4fe8"
            ]
        ]
    },
    {
        "id": "a99501f4c79a4fe8",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "VPD",
        "func": "msg.payload = Number(parseFloat(msg.payload.vpd).toFixed(2)) ;\nmsg.topic = \"VPD\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 140,
        "wires": [
            [
                "0e0a437a4502dc1f",
                "001e7c2bc40794bf",
                "cce75e0625b699f8",
                "220468fd6180191f"
            ]
        ]
    },
    {
        "id": "02aed2359c0d76ba",
        "type": "mqtt in",
        "z": "691b89143e2e3469",
        "d": true,
        "name": "Tank",
        "topic": "tele/Tank/SENSOR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c42db77c4620d462",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 1680,
        "wires": [
            [
                "22152933df7bd7ab"
            ]
        ]
    },
    {
        "id": "22152933df7bd7ab",
        "type": "function",
        "z": "691b89143e2e3469",
        "d": true,
        "name": "Füllstand berechnen",
        "func": "// Rohwert des ADS1115\nvar rawValue = msg.payload.ADS1115.A1;\n\n// Min- und Max-Werte definieren\nconst min = 7890;  // Wert bei 100 %\nconst max = 11000; // Wert bei 50 %\n\n// Berechnung des Prozentsatzes\nlet percent = 50 + ((rawValue - max) / (min - max)) * 50;\n\n// Begrenzung des Prozentsatzes auf 0 bis 100\npercent = Math.max(0, Math.min(100, percent));\n\n// Runden auf ganzzahlige Werte\npercent = Math.round(percent);\n\n// Prozentsatz als neues Payload setzen\n//msg.payload = percent;\n\n// Ausgabe der Nachricht\n\nmsg.payload.level = percent;\nmsg.payload.raw = rawValue;\nmsg.payload.unit = \"%\";\nmsg.topic = \"Level\";\nglobal.set(\"level\", percent);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "4751dfc6248db885",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Luftfeuchte",
        "func": "var Humidity = msg.payload.BME280.Humidity;\nmsg.payload = Humidity;\nmsg.topic = \"Luftfeuchte\";\nglobal.set(\"humidity\",Humidity);    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "3f8052fc5cdc9214",
                "f1733dbdbccf8940",
                "001e7c2bc40794bf",
                "646fbf40d0d55bdd"
            ]
        ]
    },
    {
        "id": "c0596b95f3d90c65",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Temperatur",
        "func": "msg.payload=msg.payload.BME280.Temperature;\nmsg.topic = \"Temperatur\";\nglobal.set(\"temperature\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "ae9225f7340334d9",
                "0d11ed4ec7265338",
                "b585639f7ac39c8e",
                "001e7c2bc40794bf",
                "224961f01084c2d9"
            ]
        ]
    },
    {
        "id": "3f8052fc5cdc9214",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Humidity",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "9d433a35b4dbf5b8"
            ]
        ]
    },
    {
        "id": "ae9225f7340334d9",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Temperature",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 140,
        "wires": [
            [
                "9d433a35b4dbf5b8"
            ]
        ]
    },
    {
        "id": "9d433a35b4dbf5b8",
        "type": "join",
        "z": "691b89143e2e3469",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 850,
        "y": 140,
        "wires": [
            [
                "ed1577c97a6fb6ec",
                "cce75e0625b699f8"
            ]
        ]
    },
    {
        "id": "0e0a437a4502dc1f",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "VPD",
        "group": "381f41de40b40333",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "VPD",
        "units": "kPa",
        "icon": "air-horn",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff6251"
            },
            {
                "from": "0.4",
                "color": "#5cd65c"
            },
            {
                "from": "0.8",
                "color": "#74a7fe"
            },
            {
                "from": "1.2",
                "color": "#e392fe"
            },
            {
                "from": "1.6",
                "color": "#ff6251"
            }
        ],
        "min": 0,
        "max": "3",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1510,
        "y": 60,
        "wires": []
    },
    {
        "id": "f1733dbdbccf8940",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Luftfeuchte",
        "group": "381f41de40b40333",
        "order": 3,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Luftfeuchte",
        "units": "%rH",
        "icon": "water-percent",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#5cd65c"
            },
            {
                "from": "80",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "0d11ed4ec7265338",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Temperatur",
        "group": "381f41de40b40333",
        "order": 4,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperatur",
        "units": "°C",
        "icon": "thermometer",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "15",
                "color": "#ffc800"
            },
            {
                "from": "21",
                "color": "#5cd65c"
            },
            {
                "from": "26",
                "color": "#ea5353"
            }
        ],
        "min": "15",
        "max": "35",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "cca620ad3ac2545d",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "Charts löschen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "2909ebdb02bd6d4b"
            ]
        ]
    },
    {
        "id": "7548fad0e7f7a5e1",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Luftdruck",
        "group": "381f41de40b40333",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Luftdruck",
        "units": "hPa",
        "icon": "air-horn",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "950",
                "color": "#5cd65c"
            }
        ],
        "min": "950",
        "max": "1050",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 620,
        "y": 460,
        "wires": []
    },
    {
        "id": "a77ec9f710dcb815",
        "type": "ui-chart",
        "z": "691b89143e2e3469",
        "group": "54ed1fdbd65f445e",
        "name": "Steuerung",
        "label": "Steuerung",
        "order": 6,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "-0.1",
        "ymax": "1.1",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "12",
        "height": "4",
        "className": "",
        "interpolation": "step",
        "x": 1550,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "2909ebdb02bd6d4b",
        "type": "ui-chart",
        "z": "691b89143e2e3469",
        "d": true,
        "group": "54ed1fdbd65f445e",
        "name": "Klima",
        "label": "Klima",
        "order": 4,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "false",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#00f900",
            "#0433ff",
            "#ff2600",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "12",
        "height": 8,
        "className": "",
        "interpolation": "bezier",
        "x": 1590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7d4744917f3ec069",
        "type": "ui-led",
        "z": "691b89143e2e3469",
        "name": "Beleuchtung",
        "group": "7eba8dcdd5856b41",
        "order": 12,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 1230,
        "y": 980,
        "wires": []
    },
    {
        "id": "d5219cd5b175b899",
        "type": "ui-switch",
        "z": "691b89143e2e3469",
        "name": "Beleuchtungsautomatik",
        "label": "Automatik",
        "group": "7eba8dcdd5856b41",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 350,
        "y": 820,
        "wires": [
            [
                "b63576e06f1f3cda"
            ]
        ]
    },
    {
        "id": "871ae4acca41cecf",
        "type": "ui-switch",
        "z": "691b89143e2e3469",
        "name": "Beleuchtung manuell",
        "label": "manuell",
        "group": "7eba8dcdd5856b41",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 700,
        "y": 760,
        "wires": [
            [
                "46e8d9a2ad9e08a8",
                "0d6787d4e97cb4eb"
            ]
        ]
    },
    {
        "id": "c5d0eb479be70ab7",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1230,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "001e7c2bc40794bf",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "deadband",
        "gap": "0.5%",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "2909ebdb02bd6d4b"
            ]
        ]
    },
    {
        "id": "464f04797c2f7fee",
        "type": "deconz-input",
        "z": "691b89143e2e3469",
        "name": "Beleuchtung",
        "topic": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/00:12:4b:00:2f:8d:7f:4d-01"
        ],
        "device_name": "",
        "query": "{}",
        "outputs": 1,
        "output_rules": [
            {
                "type": "state",
                "format": "single",
                "output": "always",
                "onstart": true,
                "payload": [
                    "on"
                ]
            }
        ],
        "x": 990,
        "y": 980,
        "wires": [
            [
                "7d4744917f3ec069"
            ]
        ]
    },
    {
        "id": "cce75e0625b699f8",
        "type": "debug",
        "z": "691b89143e2e3469",
        "name": "debug 96",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 40,
        "wires": []
    },
    {
        "id": "fff387b16869e2c6",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Taupunkt",
        "func": "//var temperature = msg.payload.Temperatur;\n//var humidity = msg.payload.Luftfeuchte;\n// Konstanten für die Magnus-Formel\n//const A = 17.27;\n//const B = 237.7; // in Grad Celsius\n\n// Berechnung des Sättigungsdampfdrucks\n//const alpha = (A * temperature) / (B + temperature) + Math.log(humidity / 100);\n\n// Berechnung des Taupunkts\n//const dewPoint = (B * alpha) / (A - alpha);\n\n//msg.payload = parseFloat(dewPoint.toFixed(2));\nmsg.payload = msg.payload.BME280.DewPoint\nmsg.topic = \"Taupunkt\";\nglobal.set(\"dewpoint\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "430e07229f80fe0d",
                "a65a2f922e420669"
            ]
        ]
    },
    {
        "id": "430e07229f80fe0d",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Taupunkt",
        "group": "381f41de40b40333",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Taupunkt",
        "units": "°C",
        "icon": "thermometer-water",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "20",
                "color": "#5cd65c"
            },
            {
                "from": "28",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 620,
        "y": 420,
        "wires": []
    },
    {
        "id": "fdf91cd10f82b249",
        "type": "mqtt in",
        "z": "691b89143e2e3469",
        "name": "GrowBox",
        "topic": "tele/GrowBox/SENSOR",
        "qos": "2",
        "datatype": "json",
        "broker": "c42db77c4620d462",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 180,
        "wires": [
            [
                "4751dfc6248db885",
                "c0596b95f3d90c65",
                "5ee076237f44de8d",
                "fff387b16869e2c6",
                "e0149b653e3208b0"
            ]
        ]
    },
    {
        "id": "63a2bd6aecc958ac",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "EC",
        "group": "1ef18b1110bc55e6",
        "order": 8,
        "width": 3,
        "height": 3,
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "EC",
        "units": "µS/cm",
        "icon": "sprout",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "1100",
                "color": "#5cd65c"
            },
            {
                "from": "1300",
                "color": "#74a7fe"
            },
            {
                "from": "1500",
                "color": "#d357fe"
            },
            {
                "from": "2100",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "2500",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a20922f867eb4b84",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "EC Topic/Titel/Einheit setzen",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.CQRSENEC01.EC",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "EC",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "EC",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "µS/cm",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1640,
        "wires": [
            [
                "63a2bd6aecc958ac",
                "834380afcb39589a",
                "80ce486ea5c2ff17"
            ]
        ]
    },
    {
        "id": "a7292c43124af535",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Füllstand",
        "group": "1ef18b1110bc55e6",
        "order": 7,
        "width": 3,
        "height": 3,
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Füllstand",
        "units": "%",
        "icon": "waves",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "20",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 1760,
        "wires": []
    },
    {
        "id": "965aab5f2e216386",
        "type": "ui-chart",
        "z": "691b89143e2e3469",
        "d": true,
        "group": "54ed1fdbd65f445e",
        "name": "Nährlösung",
        "label": "Nährlösung",
        "order": 5,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "12",
        "height": "8",
        "className": "",
        "interpolation": "bezier",
        "x": 1410,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "7a86e4ad17d7b899",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "Füllstand Topic/Titel/Einheit setzen",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Tankinhalt[\"Füllstand\"]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Füllstand",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Füllstand",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "unit",
                "pt": "msg",
                "to": "%",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1680,
        "wires": [
            [
                "a7292c43124af535",
                "834380afcb39589a",
                "26d569763e916651",
                "a5456f053cb0b788"
            ]
        ]
    },
    {
        "id": "6219d03177ac7613",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "Temperatur auf payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.DS18B20.Temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Temperatur",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1780,
        "wires": [
            [
                "770a8f1a681c576d",
                "53270897fe7736bf",
                "834380afcb39589a",
                "6f381ad01c5f6590"
            ]
        ]
    },
    {
        "id": "770a8f1a681c576d",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Temperatur",
        "group": "1ef18b1110bc55e6",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperatur",
        "units": "°C",
        "icon": "coolant-temperature",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#fecb3e"
            },
            {
                "from": "19",
                "color": "#5cd65c"
            },
            {
                "from": "24",
                "color": "#fecb3e"
            },
            {
                "from": "26",
                "color": "#ff4013"
            }
        ],
        "min": "10",
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 890,
        "y": 1800,
        "wires": []
    },
    {
        "id": "80c6f21467b41cdf",
        "type": "link in",
        "z": "691b89143e2e3469",
        "name": "Lüftung",
        "links": [
            "48e07ef408ef91f8"
        ],
        "x": 855,
        "y": 700,
        "wires": [
            [
                "99d095a40deb9815"
            ]
        ]
    },
    {
        "id": "075cb8db0d3bc90e",
        "type": "ui-text-input",
        "z": "691b89143e2e3469",
        "group": "7eba8dcdd5856b41",
        "name": "Beleuchtungsstart",
        "label": "Beleuchtungsstart",
        "order": 15,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "time",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 330,
        "y": 920,
        "wires": [
            [
                "4f9b49a5beb37e33"
            ]
        ]
    },
    {
        "id": "5ffa7adfc8ea6142",
        "type": "ui-text-input",
        "z": "691b89143e2e3469",
        "group": "7eba8dcdd5856b41",
        "name": "Beleuchtungsdauer",
        "label": "Beleuchtungsdauer",
        "order": 16,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "time",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 330,
        "y": 880,
        "wires": [
            [
                "1df30ecb15957ae3"
            ]
        ]
    },
    {
        "id": "b585639f7ac39c8e",
        "type": "link out",
        "z": "691b89143e2e3469",
        "name": "Temperatur",
        "mode": "link",
        "links": [
            "448d49311aba6cbb"
        ],
        "x": 625,
        "y": 180,
        "wires": []
    },
    {
        "id": "a0f05ce619debe34",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "global licht setzen",
        "func": "msg.licht = msg.payload;\nglobal.set(\"licht\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "24c6b3591409961c",
        "type": "ui-text",
        "z": "691b89143e2e3469",
        "group": "7eba8dcdd5856b41",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "lbl_licht",
        "label": "Beleuchtung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 100,
        "y": 760,
        "wires": []
    },
    {
        "id": "7279f72a869d7b26",
        "type": "ui-iframe",
        "z": "691b89143e2e3469",
        "name": "VPDChart",
        "group": "381f41de40b40333",
        "order": 1,
        "src": "https://vpdchart.com/#C,50,25,23,0",
        "width": "4",
        "height": "22",
        "x": 660,
        "y": 500,
        "wires": []
    },
    {
        "id": "e0149b653e3208b0",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "url VPDChart erzeugen ",
        "func": "let airTemp = msg.payload.BME280.Temperature || 25; // Standardwert 25°C\nlet leafTemp = airTemp; // LED Luft=Blatt - 2; // Blatttemperatur = Lufttemperatur - 2°C\nlet humidity = msg.payload.BME280.Humidity || 50; // Standardwert 50%\n\n\n\nlet url = `https://vpdchart.com/#C,${humidity},${airTemp},${leafTemp},0`;\nmsg.src = url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 540,
        "wires": [
            [
                "7279f72a869d7b26"
            ]
        ]
    },
    {
        "id": "63b0342b220872df",
        "type": "ui-iframe",
        "z": "691b89143e2e3469",
        "name": "MotionEye",
        "group": "b0de33abd4914424",
        "order": 3,
        "src": "http://192.168.178.36:8081",
        "width": "2",
        "height": "8",
        "x": 630,
        "y": 580,
        "wires": []
    },
    {
        "id": "f9a788f75aced732",
        "type": "ui-text",
        "z": "691b89143e2e3469",
        "group": "25d83088be3ee194",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "lbl_heizung",
        "label": "Heizung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 310,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c20b63e941e59b89",
        "type": "ui-switch",
        "z": "691b89143e2e3469",
        "name": "heizung",
        "label": "manuell",
        "group": "25d83088be3ee194",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "heizung",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 300,
        "y": 1220,
        "wires": [
            [
                "53270897fe7736bf"
            ]
        ]
    },
    {
        "id": "1a41e6b0df61e3f2",
        "type": "ui-led",
        "z": "691b89143e2e3469",
        "name": "Heizung",
        "group": "25d83088be3ee194",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "off",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "on",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 940,
        "y": 1240,
        "wires": []
    },
    {
        "id": "ab99d28e6017a828",
        "type": "remote-access",
        "z": "691b89143e2e3469",
        "confignode": "54774044299e8738",
        "name": "Remote-RED",
        "verbose": 0,
        "x": 110,
        "y": 660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3c3d663debef8493",
        "type": "link in",
        "z": "691b89143e2e3469",
        "name": "Nährstoffpumpe",
        "links": [
            "4f52fd715d0f4cd1"
        ],
        "x": 875,
        "y": 540,
        "wires": [
            [
                "afb8a88727fa62a4"
            ]
        ]
    },
    {
        "id": "de663c7ea0d961e2",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "topic Pumpe",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Pumpe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "efa1612091118674"
            ]
        ]
    },
    {
        "id": "afb8a88727fa62a4",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "Sting->Zahl",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 540,
        "wires": [
            [
                "de663c7ea0d961e2"
            ]
        ]
    },
    {
        "id": "28f7584e8cac78bd",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "iPad Verbindung",
        "info": "",
        "x": 120,
        "y": 620,
        "wires": []
    },
    {
        "id": "aeb8c6455e787782",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Lichtsteuerung",
        "info": "",
        "x": 120,
        "y": 720,
        "wires": []
    },
    {
        "id": "e26fa505ee46ddc0",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Lichtstärke und Tanksensoren",
        "info": "",
        "x": 160,
        "y": 1400,
        "wires": []
    },
    {
        "id": "b49d2ca6521a28ca",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "PPFD berechnen",
        "func": "var lux = msg.payload;\n\nvar ppfd = lux * 0.022222;\nmsg.payload = Math.round(ppfd);\nmsg.topic = \"PPFD\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1460,
        "wires": [
            [
                "43267bea98da6712",
                "fcf8e5e447584bf3"
            ]
        ]
    },
    {
        "id": "43267bea98da6712",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "PPFD",
        "group": "b0de33abd4914424",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "PPFD",
        "units": "µmol/m2/s",
        "icon": "sun-wireless",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "200",
                "color": "#5cd65c"
            },
            {
                "from": "300",
                "color": "#a8c6fe"
            },
            {
                "from": "600",
                "color": "#b18cfe"
            }
        ],
        "min": 0,
        "max": "1000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 970,
        "y": 1460,
        "wires": []
    },
    {
        "id": "86b31eff6b66ec4a",
        "type": "ui-gauge",
        "z": "691b89143e2e3469",
        "name": "Lichtstärke",
        "group": "b0de33abd4914424",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Lichtstärke",
        "units": "Lux",
        "icon": "weather-sunny",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "9000",
                "color": "#5cd65c"
            },
            {
                "from": "13500",
                "color": "#74a7fe"
            },
            {
                "from": "27000",
                "color": "#b18cfe"
            }
        ],
        "min": 0,
        "max": "35000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 990,
        "y": 1500,
        "wires": []
    },
    {
        "id": "16a1fb89e051b85d",
        "type": "ui-chart",
        "z": "691b89143e2e3469",
        "group": "54ed1fdbd65f445e",
        "name": "Licht",
        "label": "Licht",
        "order": 7,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "false",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "12",
        "height": "4",
        "className": "",
        "interpolation": "step",
        "x": 1130,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "983a068138a95cd5",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "0d4cff566166bde7",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Heizung",
        "info": "",
        "x": 100,
        "y": 1120,
        "wires": []
    },
    {
        "id": "83000ffee656196f",
        "type": "debug",
        "z": "691b89143e2e3469",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 1900,
        "wires": []
    },
    {
        "id": "4fe7867b068a1d79",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Abfrage Nährstoffpumpe",
        "info": "",
        "x": 730,
        "y": 540,
        "wires": []
    },
    {
        "id": "b21e60ea48f18a71",
        "type": "link in",
        "z": "691b89143e2e3469",
        "name": "link in 1",
        "links": [
            "7ad3a40b2bafc8a8"
        ],
        "x": 1045,
        "y": 500,
        "wires": [
            [
                "cff98650299c3ccb"
            ]
        ]
    },
    {
        "id": "cff98650299c3ccb",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "bool2bin",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sprudler",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 500,
        "wires": [
            [
                "9afbda05bb34428b"
            ]
        ]
    },
    {
        "id": "63644df81d7325d7",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1190,
        "y": 700,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "19e0fa3324956b56",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "fcf8e5e447584bf3",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "deadband",
        "gap": "0.5%",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 1560,
        "wires": [
            [
                "16a1fb89e051b85d"
            ]
        ]
    },
    {
        "id": "9afbda05bb34428b",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1310,
        "y": 500,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "834380afcb39589a",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "deadband",
        "gap": "0.5%",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 990,
        "y": 1700,
        "wires": [
            [
                "965aab5f2e216386"
            ]
        ]
    },
    {
        "id": "efa1612091118674",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1310,
        "y": 540,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "877d92e01edc6318",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Licht",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 780,
        "wires": [
            [
                "a77ec9f710dcb815"
            ]
        ]
    },
    {
        "id": "aadc03c4ff09defa",
        "type": "comment",
        "z": "691b89143e2e3469",
        "name": "Abfrage Sprudler",
        "info": "",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "8455136026fbf225",
        "type": "ui-switch",
        "z": "691b89143e2e3469",
        "name": "",
        "label": "Heizmodus Matte/Tank",
        "group": "25d83088be3ee194",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "heizmodus",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 250,
        "y": 1280,
        "wires": [
            [
                "53270897fe7736bf"
            ]
        ]
    },
    {
        "id": "fda6540a39b1da5e",
        "type": "debug",
        "z": "691b89143e2e3469",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1340,
        "wires": []
    },
    {
        "id": "53270897fe7736bf",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "Logiksteuerung",
        "func": "// Zustände aus dem Kontext abrufen oder initialisieren\nlet switch1 = context.get('heizung') || \"off\"; // Zustand des Heizungsschalters\nlet switch2 = context.get('heizmodus') || \"off\"; // Zustand des Heizmodus-Schalters\nlet threshold = context.get('threshold') || 22; // Schwellenwert\n\n// Eingehende Nachrichten verarbeiten\nif (msg.topic === 'heizung') {\n    // Heizungsschalter manuell betätigt\n    switch1 = msg.payload === \"on\" ? \"on\" : \"off\"; // String-Vergleich mit \"on\"\n    context.set('heizung', switch1);\n\n    // Status aktualisieren\n    node.status({\n        fill: switch1 === \"on\" ? \"green\" : \"grey\",\n        shape: \"dot\",\n        text: `Heizung: ${switch1 === \"on\" ? \"ON\" : \"OFF\"}`\n    });\n\n    // Aktuellen Zustand zurückgeben\n    return { payload: switch1 }; // Rückgabe \"on\" oder \"off\"\n\n} else if (msg.topic === 'heizmodus') {\n    // Heizmodus aktivieren/deaktivieren\n    switch2 = msg.payload === \"on\" ? \"on\" : \"off\"; // String-Vergleich mit \"on\"\n    context.set('heizmodus', switch2);\n\n    // Statusanzeige für den Heizmodus\n    node.status({\n        fill: switch2 === \"on\" ? \"blue\" : \"grey\",\n        shape: \"dot\",\n        text: `Heizmodus: ${switch2 === \"on\" ? \"Aktiv\" : \"Inaktiv\"}`\n    });\n\n    // Keine direkte Rückgabe\n    return null;\n\n} else if (msg.topic === 'Temperatur') {\n    // Überwachter Wert prüfen\n    let value = parseFloat(msg.payload); // Sicherstellen, dass der Wert numerisch ist\n\n    if (switch2 === \"on\" && value > threshold) {\n        // Heizmodus aktiv und Schwellenwert überschritten\n        if (switch1 === \"on\") {\n            // Heizung ausschalten, wenn sie an ist\n            switch1 = \"off\";\n            context.set('heizung', switch1);\n            node.status({\n                fill: \"red\",\n                shape: \"ring\",\n                text: `Wert überschritten: ${value}, Heizung OFF`\n            });\n            return { payload: \"off\" };\n        }\n    }\n}\n\n// Aktuellen Zustand der Heizung zurückgeben\nnode.status({\n    fill: switch1 === \"on\" ? \"green\" : \"grey\",\n    shape: \"dot\",\n    text: `Heizung: ${switch1 === \"on\" ? \"ON\" : \"OFF\"}`\n});\nreturn { payload: switch1 }; // Rückgabe \"on\" oder \"off\"\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1280,
        "wires": [
            [
                "4ae6b09e3612fd6b"
            ]
        ]
    },
    {
        "id": "43866b3aabfed04d",
        "type": "inject",
        "z": "691b89143e2e3469",
        "name": "Überwachter Wert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "value",
        "payload": "22",
        "payloadType": "num",
        "x": 190,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "4ae6b09e3612fd6b",
        "type": "rbe",
        "z": "691b89143e2e3469",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "1a41e6b0df61e3f2",
                "c20b63e941e59b89",
                "2ca19d273e91d059"
            ]
        ]
    },
    {
        "id": "e6fdc0b78e7a72cd",
        "type": "debug",
        "z": "691b89143e2e3469",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 780,
        "wires": []
    },
    {
        "id": "2ca19d273e91d059",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "bdfdb47ad9a8651e"
            ]
        ]
    },
    {
        "id": "bdfdb47ad9a8651e",
        "type": "deconz-output",
        "z": "691b89143e2e3469",
        "name": "Nährlösung",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/70:b3:d5:2b:60:0f:bf:05-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights",
                "uniqueId": "ui-id-16"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "after_command",
                "value": ""
            }
        },
        "x": 1130,
        "y": 1340,
        "wires": [
            [
                "fda6540a39b1da5e"
            ]
        ]
    },
    {
        "id": "b63576e06f1f3cda",
        "type": "Invert",
        "z": "691b89143e2e3469",
        "name": "Invert",
        "x": 550,
        "y": 820,
        "wires": [
            [
                "2c2c24690c19c08c",
                "e6fdc0b78e7a72cd"
            ]
        ]
    },
    {
        "id": "5441f52451465344",
        "type": "change",
        "z": "691b89143e2e3469",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "26d569763e916651",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "d": true,
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "level",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1320,
        "y": 1960,
        "wires": []
    },
    {
        "id": "a5456f053cb0b788",
        "type": "function",
        "z": "691b89143e2e3469",
        "name": "function 15",
        "func": "global.set(\"level\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "80ce486ea5c2ff17",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "d": true,
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "ec",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1290,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f9860899be673a98",
        "type": "mqtt in",
        "z": "691b89143e2e3469",
        "name": "TankCtl",
        "topic": "tele/TankCtl/SENSOR",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "c42db77c4620d462",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 1840,
        "wires": [
            [
                "83000ffee656196f",
                "6219d03177ac7613",
                "7a86e4ad17d7b899",
                "a20922f867eb4b84"
            ]
        ]
    },
    {
        "id": "6f381ad01c5f6590",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "d": true,
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "temperatur",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 800,
        "y": 1860,
        "wires": []
    },
    {
        "id": "646fbf40d0d55bdd",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "luftfeuchte",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "224961f01084c2d9",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "lufttemperatur",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 790,
        "y": 260,
        "wires": []
    },
    {
        "id": "a65a2f922e420669",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "taupunkt",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "220468fd6180191f",
        "type": "influxdb out",
        "z": "691b89143e2e3469",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "vpd",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1450,
        "y": 240,
        "wires": []
    },
    {
        "id": "e3fb437742ef714e",
        "type": "tab",
        "label": "Lüftung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1",
        "type": "inject",
        "z": "e3fb437742ef714e",
        "name": "Simulierte Temperatur",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "26",
        "payloadType": "num",
        "x": 180,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Zeit bestimmen (Tag/Nacht)",
        "func": "let now = new Date();\nlet hour = now.getHours();\n\nmsg.time = (global.get(\"licht\") == true) ? 'day' : 'night';\n// msg.time = (hour >= 6 && hour < 22) ? 'day' : 'night';\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "5852c48bea17d473"
            ]
        ]
    },
    {
        "id": "3",
        "type": "switch",
        "z": "e3fb437742ef714e",
        "name": "Tag oder Nacht",
        "property": "time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "day",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 360,
        "wires": [
            [
                "4"
            ],
            [
                "5"
            ]
        ]
    },
    {
        "id": "4",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Tag: Hysterese",
        "func": "var onThreshold = global.get(\"temp_max_tag\"); // Einschaltwert für Temperatur\nvar offThreshold = global.get(\"temp_min_tag\"); // Ausschaltwert für Temperatur\nvar targetVPD = global.get(\"targetVPD\"); // Ziel-VPD\nvar vpd = global.get(\"vpd\"); // Gemessener VPD\n\n// Aktuellen Zustand abrufen\nlet state = global.get('fanState') || 'off';\nlet statusMessage = \"\"; // Statusmeldung\n\n// Debugging: Aktuelle Werte ausgeben\nnode.warn(`onThreshold: ${onThreshold}, offThreshold: ${offThreshold}, targetVPD: ${targetVPD}, vpd: ${vpd}, payload: ${msg.payload}, state: ${state}`);\n\n// Sicherstellen, dass Werte definiert und korrekt sind\nif (onThreshold === undefined || offThreshold === undefined || targetVPD === undefined || vpd === undefined) {\n    msg.error = \"Ein oder mehrere globale Werte sind nicht definiert.\";\n    return msg;\n}\nif (typeof msg.payload !== \"number\" || typeof onThreshold !== \"number\") {\n    msg.error = \"Temperaturwerte oder msg.payload sind keine Zahlen.\";\n    return msg;\n}\n\n// Überprüfen, ob der Lüfter eingeschaltet werden soll\nif (state === 'off' && (msg.payload >= onThreshold || vpd < targetVPD)) {\n    state = 'on';\n    if (msg.payload >= onThreshold && vpd < targetVPD) {\n        statusMessage = \"Lüfter eingeschaltet: Temperatur hoch und VPD zu niedrig.\";\n    } else if (msg.payload >= onThreshold) {\n        statusMessage = \"Lüfter eingeschaltet: Temperatur überschreitet Grenzwert.\";\n    } else if (vpd < targetVPD) {\n        statusMessage = \"Lüfter eingeschaltet: VPD unter Zielwert.\";\n    }\n}\n// Überprüfen, ob der Lüfter ausgeschaltet werden soll\nelse if (state === 'on' && msg.payload <= offThreshold && vpd >= targetVPD) {\n    state = 'off';\n    if (msg.payload <= offThreshold && vpd >= targetVPD) {\n        statusMessage = \"Lüfter ausgeschaltet: Temperatur niedrig und VPD im Zielbereich.\";\n    } else if (msg.payload <= offThreshold) {\n        statusMessage = \"Lüfter ausgeschaltet: Temperatur unter Grenzwert.\";\n    } else if (vpd >= targetVPD) {\n        statusMessage = \"Lüfter ausgeschaltet: VPD erreicht Zielwert.\";\n    }\n} else {\n    statusMessage = state === 'on'\n        ? \"Lüfter bleibt an: Bedingungen weiterhin erfüllt.\"\n        : \"Lüfter bleibt aus: Keine Bedingung erfüllt.\";\n}\n\n// Zustand speichern\nglobal.set('fanState', state);\nmsg.fanState = state;\nmsg.payload = state;\nmsg.status = statusMessage; // Statusmeldung hinzufügen\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "11fccae09dd0c987",
                "da522403f180f32c",
                "24143d7349a9e090",
                "1d3082a463f9b48a"
            ]
        ]
    },
    {
        "id": "5",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Nacht: Hysterese",
        "func": "var onThreshold = global.get(\"temp_max_nacht\"); // Einschaltwert für Temperatur\nvar offThreshold = global.get(\"temp_min_nacht\"); // Ausschaltwert für Temperatur\nvar targetVPD = global.get(\"targetVPD\"); // Ziel-VPD\nvar vpd = global.get(\"vpd\"); // Gemessener VPD\n\n// Aktuellen Zustand abrufen\nlet state = global.get('fanState') || 'off';\nlet statusMessage = \"\"; // Statusmeldung\n\n// Debugging: Aktuelle Werte ausgeben\nnode.warn(`onThreshold: ${onThreshold}, offThreshold: ${offThreshold}, targetVPD: ${targetVPD}, vpd: ${vpd}, payload: ${msg.payload}, state: ${state}`);\n\n// Sicherstellen, dass Werte definiert und korrekt sind\nif (onThreshold === undefined || offThreshold === undefined || targetVPD === undefined || vpd === undefined) {\n    msg.error = \"Ein oder mehrere globale Werte sind nicht definiert.\";\n    return msg;\n}\nif (typeof msg.payload !== \"number\" || typeof onThreshold !== \"number\") {\n    msg.error = \"Temperaturwerte oder msg.payload sind keine Zahlen.\";\n    return msg;\n}\n\n// Überprüfen, ob der Lüfter eingeschaltet werden soll\nif (state === 'off' && (msg.payload >= onThreshold || vpd < targetVPD)) {\n    state = 'on';\n    if (msg.payload >= onThreshold && vpd < targetVPD) {\n        statusMessage = \"Lüfter eingeschaltet: Temperatur hoch und VPD zu niedrig.\";\n    } else if (msg.payload >= onThreshold) {\n        statusMessage = \"Lüfter eingeschaltet: Temperatur überschreitet Grenzwert.\";\n    } else if (vpd < targetVPD) {\n        statusMessage = \"Lüfter eingeschaltet: VPD unter Zielwert.\";\n    }\n}\n// Überprüfen, ob der Lüfter ausgeschaltet werden soll\nelse if (state === 'on' && msg.payload <= offThreshold && vpd >= targetVPD) {\n    state = 'off';\n    if (msg.payload <= offThreshold && vpd >= targetVPD) {\n        statusMessage = \"Lüfter ausgeschaltet: Temperatur niedrig und VPD im Zielbereich.\";\n    } else if (msg.payload <= offThreshold) {\n        statusMessage = \"Lüfter ausgeschaltet: Temperatur unter Grenzwert.\";\n    } else if (vpd >= targetVPD) {\n        statusMessage = \"Lüfter ausgeschaltet: VPD erreicht Zielwert.\";\n    }\n} else {\n    statusMessage = state === 'on'\n        ? \"Lüfter bleibt an: Bedingungen weiterhin erfüllt.\"\n        : \"Lüfter bleibt aus: Keine Bedingung erfüllt.\";\n}\n\n// Zustand speichern\nglobal.set('fanState', state);\nmsg.fanState = state;\nmsg.payload = state;\nmsg.status = statusMessage; // Statusmeldung hinzufügen\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "5331b2e33eca2e8c",
                "da522403f180f32c",
                "24143d7349a9e090",
                "e625b41cbc387242",
                "1d3082a463f9b48a"
            ]
        ]
    },
    {
        "id": "5331b2e33eca2e8c",
        "type": "debug",
        "z": "e3fb437742ef714e",
        "name": "debug 99",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "70deae921fc1e076",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Set FanState",
        "func": "global.set(\"fanState\", \"off\");\n//global.set(\"vpd\", \"1.8\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6c58bc590ed21d7f",
        "type": "inject",
        "z": "e3fb437742ef714e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "70deae921fc1e076",
                "8b308a1a9fc80297",
                "d367eaa60e54e452"
            ]
        ]
    },
    {
        "id": "11fccae09dd0c987",
        "type": "rbe",
        "z": "e3fb437742ef714e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 990,
        "y": 440,
        "wires": [
            [
                "48e07ef408ef91f8"
            ]
        ]
    },
    {
        "id": "24143d7349a9e090",
        "type": "ui-led",
        "z": "e3fb437742ef714e",
        "name": "Entlüftung",
        "group": "7eba8dcdd5856b41",
        "order": 18,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "off",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "on",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "c0e975cbbee87b07",
        "type": "deconz-output",
        "z": "e3fb437742ef714e",
        "name": "Entlüftung",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/00:12:4b:00:2f:8d:68:67-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "after_command",
                "value": ""
            }
        },
        "x": 1070,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b5aced683c4250ac",
        "type": "ui-switch",
        "z": "e3fb437742ef714e",
        "name": "Lüfterautomatik",
        "label": "Automatik",
        "group": "7eba8dcdd5856b41",
        "order": 20,
        "width": "0",
        "height": "0",
        "passthru": true,
        "decouple": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "",
        "clickableArea": "switch",
        "onvalue": "auto",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "manual",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 940,
        "y": 200,
        "wires": [
            [
                "e9f69c4f0cfe5761"
            ]
        ]
    },
    {
        "id": "63c95ce52d071fa6",
        "type": "ui-switch",
        "z": "e3fb437742ef714e",
        "name": "Entüftung",
        "label": "manuell",
        "group": "7eba8dcdd5856b41",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 620,
        "y": 260,
        "wires": [
            [
                "2afeecd3c21720cd"
            ]
        ]
    },
    {
        "id": "48e07ef408ef91f8",
        "type": "link out",
        "z": "e3fb437742ef714e",
        "name": "lueftung_state",
        "mode": "link",
        "links": [
            "80c6f21467b41cdf"
        ],
        "x": 1115,
        "y": 440,
        "wires": []
    },
    {
        "id": "448d49311aba6cbb",
        "type": "link in",
        "z": "e3fb437742ef714e",
        "name": "Temperatur",
        "links": [
            "b585639f7ac39c8e"
        ],
        "x": 65,
        "y": 260,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "4543e1a635ca2795",
        "type": "ui-text-input",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "name": "temp_max_tag",
        "label": "max. Temperatur (Tag)",
        "order": 23,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 820,
        "y": 540,
        "wires": [
            [
                "30c0a1c0fbd4fc1c"
            ]
        ]
    },
    {
        "id": "bd86507e6fb18dad",
        "type": "ui-text-input",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "name": "temp_min_tag",
        "label": "min. Temperatur (Tag)",
        "order": 22,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 820,
        "y": 580,
        "wires": [
            [
                "34e6102730c13e68"
            ]
        ]
    },
    {
        "id": "e435d046fbfcc1d0",
        "type": "ui-text-input",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "name": "temp_max_nacht",
        "label": "max. Temperatur (Nacht)",
        "order": 25,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 830,
        "y": 620,
        "wires": [
            [
                "9550e84c68ca8a73"
            ]
        ]
    },
    {
        "id": "182f4fb10e85581a",
        "type": "ui-text-input",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "name": "temp_min_nacht",
        "label": "min. Temperatur (Nacht)",
        "order": 24,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 830,
        "y": 660,
        "wires": [
            [
                "5a4d59c3e1527156"
            ]
        ]
    },
    {
        "id": "30c0a1c0fbd4fc1c",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "set temp_max_tag",
        "func": "global.set(\"temp_max_tag\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "34e6102730c13e68",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "set temp_min_tag",
        "func": "global.set(\"temp_min_tag\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "9550e84c68ca8a73",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "set temp_max_nacht",
        "func": "global.set(\"temp_max_nacht\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5a4d59c3e1527156",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "set temp_min_nacht",
        "func": "global.set(\"temp_min_nacht\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "11b97e70867f4bfa",
        "type": "link in",
        "z": "e3fb437742ef714e",
        "name": "Licht",
        "links": [],
        "x": 65,
        "y": 320,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "062d6b7526c1c316",
        "type": "persistent-global-context",
        "z": "e3fb437742ef714e",
        "x": 390,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "01d5b21fa1056c7e",
        "type": "inject",
        "z": "e3fb437742ef714e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "062d6b7526c1c316",
                "b468a7689b29c824"
            ]
        ]
    },
    {
        "id": "7e6b6f7f782b7c23",
        "type": "ui-text",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "order": 17,
        "width": 0,
        "height": 0,
        "name": "lbl_entlüftung",
        "label": "Entlüftung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 440,
        "y": 100,
        "wires": []
    },
    {
        "id": "c3a9dc835a4dd3b7",
        "type": "ui-dropdown",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "name": "Stadium",
        "label": "Stadium",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "Jungpflanzen",
                "value": "jung",
                "type": "str"
            },
            {
                "label": "Wachstumsphase",
                "value": "wuchs",
                "type": "str"
            },
            {
                "label": "Blütephase",
                "value": "bluete",
                "type": "str"
            },
            {
                "label": "Spätblütephase",
                "value": "spaetbluete",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "befstadium",
        "topicType": "global",
        "className": "",
        "typeIsComboBox": false,
        "x": 360,
        "y": 700,
        "wires": [
            [
                "644eeddaf35eb7f2",
                "d367eaa60e54e452"
            ]
        ]
    },
    {
        "id": "95f6a010e8092ac7",
        "type": "ui-text",
        "z": "e3fb437742ef714e",
        "group": "25d83088be3ee194",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Luftbefeuchter",
        "label": "Luftbefeuchter",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 120,
        "y": 840,
        "wires": []
    },
    {
        "id": "8b308a1a9fc80297",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "get bef_stadium",
        "func": "msg.payload = global.get(\"befstadium\");\n//node.warn(global.get('befstadium'))\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 740,
        "wires": [
            [
                "c3a9dc835a4dd3b7"
            ]
        ]
    },
    {
        "id": "644eeddaf35eb7f2",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "set bef_stadium",
        "func": "global.set(\"befstadium\", msg.payload);\nglobal.set('humidifierState', \"off\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "c24d0d0d407b0923",
        "type": "ui-led",
        "z": "e3fb437742ef714e",
        "name": "Befeuchter Status",
        "group": "25d83088be3ee194",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "off",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "on",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "8bc5f24a5e8fb8c1",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Befeuchtersteuerung",
        "func": "// Pflanzenstadium und aktuelle VPD aus globalen Variablen abrufen\nlet stage = global.get('befstadium') || \"default\";\nlet vpd = parseFloat(global.get('vpd')) || 0;\nnode.warn(`Aktueller VPD-Wert: ${vpd}`);\n\n// Grenzwerte für jedes Stadium definieren\nlet vpdRanges = {\n    jung: { min: 0.4, max: 0.8 },\n    wuchs: { min: 0.8, max: 1.2 },\n    bluete: { min: 1.2, max: 1.6 },\n    spaetbluete: { min: 1.2, max: 1.6 },\n    default: { min: 0.8, max: 1.2 }\n};\n\n// Werte für das aktuelle Stadium holen\nlet minVPD = vpdRanges[stage]?.min || vpdRanges.default.min;\nlet maxVPD = vpdRanges[stage]?.max || vpdRanges.default.max;\nlet targetVPD = parseFloat(((minVPD + maxVPD) / 2).toFixed(2));\n\n// Aktueller Zustand des Luftbefeuchters aus vorheriger Nachricht oder globaler Variable\nlet humidifierState = global.get('humidifierState') || 'off';\nlet command = null; // Standardmäßig keine Aktion\nlet meldung = `VPD min: ${minVPD}, max: ${maxVPD}, target: ${targetVPD}`;\n\n// Steuerlogik basierend auf VPD und Zielwert\nif (vpd > targetVPD + 0.1) {\n    if (humidifierState === 'off') {\n        command = 'on';\n        humidifierState = 'on';\n        meldung = `vpd > target (${targetVPD}): ${vpd.toFixed(2)}, Luftbefeuchter einschalten`;\n    } else {\n        meldung = `vpd > target (${targetVPD}): ${vpd.toFixed(2)}, Luftbefeuchter bleibt an`;\n    }\n} else if (vpd < targetVPD - 0.1) {\n    if (humidifierState === 'on') {\n        command = 'off';\n        humidifierState = 'off';\n        meldung = `vpd < target (${targetVPD}): ${vpd.toFixed(2)}, Luftbefeuchter ausschalten`;\n    } else {\n                meldung = `vpd < target (${targetVPD}): ${vpd.toFixed(2)}, Luftbefeuchter bleibt aus`;\n    }\n} else {\n    command = 'off';\n    humidifierState = 'off';\n    meldung = `vpd nahe target (${targetVPD}): ${vpd.toFixed(2)}, keine Aktion notwendig`;\n}\n\n// Zustand des Luftbefeuchters speichern\nglobal.set('humidifierState', humidifierState);\nglobal.set('targetVPD', targetVPD);\n\n// Debugging\nnode.warn(`Aktueller global-Wert für humidifierState: ${global.get('humidifierState')}`);\n\n// Ausgaben vorbereiten\nmsg.payload = {\n    command: command,\n    vpd: vpd,\n    stage: stage,\n    humidifierState: humidifierState,\n    minVPD: minVPD,\n    maxVPD: maxVPD,\n    targetVPD: targetVPD,\n    meldung: meldung\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "d380a19c98159786",
                "b047db880c7af2a2",
                "3737305db68d21f1"
            ]
        ]
    },
    {
        "id": "d380a19c98159786",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.humidifierState",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 880,
        "wires": [
            [
                "c24d0d0d407b0923",
                "4ce0538edbeab457"
            ]
        ]
    },
    {
        "id": "75d965829d151dae",
        "type": "ui-text",
        "z": "e3fb437742ef714e",
        "group": "25d83088be3ee194",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "lbl_Bef_Status",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "",
        "fontSize": "15",
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 880,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b047db880c7af2a2",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.meldung",
                "pt": "msg",
                "to": "ui_update.label",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "75d965829d151dae"
            ]
        ]
    },
    {
        "id": "d367eaa60e54e452",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "Temperaturvorgaben",
        "func": "global.set(\"tempRanges\", {\n    jung: { temp_min_tag: 22, temp_max_tag: 26, temp_min_nacht: 22, temp_max_nacht: 26 },\n    wuchs: { temp_min_tag: 24, temp_max_tag: 30, temp_min_nacht: 18, temp_max_nacht: 22 },\n    bluete: { temp_min_tag: 20, temp_max_tag: 26, temp_min_nacht: 16, temp_max_nacht: 20 },\n    spaetbluete: { temp_min_tag: 18, temp_max_tag: 24, temp_min_nacht: 18, temp_max_nacht: 24 },\n    default: { temp_min_tag: 22, temp_max_tag: 26, temp_min_nacht: 22, temp_max_nacht: 26 } // Standardwerte, falls kein Stadium gesetzt\n});\n\nlet tempRanges = global.get(\"tempRanges\");\nlet stadium = global.get(\"befstadium\") || \"default\"; // Stadium aus msg.payload oder 'default'\nlet selectedRange = tempRanges[stadium] || tempRanges.default; // Fallback zu default\n\n// Übergeben an die nächsten Knoten\nmsg.temp_min_tag = selectedRange.temp_min_tag;\nmsg.temp_max_tag = selectedRange.temp_max_tag;\nmsg.temp_min_nacht = selectedRange.temp_min_nacht;\nmsg.temp_max_nacht = selectedRange.temp_max_nacht;\nmsg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "d108fa3bab10ec69",
                "65304575f465bb4e",
                "2bcb8d219d7fdd34",
                "0f0463465aac15df"
            ]
        ]
    },
    {
        "id": "d108fa3bab10ec69",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "temp_min_tag",
        "func": "msg.payload = msg.temp_min_tag; // Setze den Wert direkt in msg.payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 580,
        "wires": [
            [
                "bd86507e6fb18dad"
            ]
        ]
    },
    {
        "id": "65304575f465bb4e",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "temp_max_tag",
        "func": "msg.payload = msg.temp_max_tag; // Setze den Wert direkt in msg.payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 540,
        "wires": [
            [
                "4543e1a635ca2795"
            ]
        ]
    },
    {
        "id": "0f0463465aac15df",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "temp_min_tag",
        "func": "msg.payload = msg.temp_min_nacht; // Setze den Wert direkt in msg.payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 660,
        "wires": [
            [
                "182f4fb10e85581a"
            ]
        ]
    },
    {
        "id": "2bcb8d219d7fdd34",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "temp_max_nacht",
        "func": "msg.payload = msg.temp_max_nacht; // Setze den Wert direkt in msg.payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "e435d046fbfcc1d0"
            ]
        ]
    },
    {
        "id": "e9f69c4f0cfe5761",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "Modus speichern",
        "rules": [
            {
                "t": "set",
                "p": "mode_al",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "62dcf946703d8ce6",
        "type": "inject",
        "z": "e3fb437742ef714e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "auto",
        "payloadType": "str",
        "x": 750,
        "y": 200,
        "wires": [
            [
                "b5aced683c4250ac"
            ]
        ]
    },
    {
        "id": "2afeecd3c21720cd",
        "type": "switch",
        "z": "e3fb437742ef714e",
        "name": "Nur im manuellen Modus",
        "property": "mode_al",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "manual",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 260,
        "wires": [
            [
                "24143d7349a9e090",
                "48e07ef408ef91f8",
                "da522403f180f32c"
            ]
        ]
    },
    {
        "id": "5852c48bea17d473",
        "type": "switch",
        "z": "e3fb437742ef714e",
        "name": "Nur im automatischen Modus",
        "property": "mode_al",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "auto",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 260,
        "wires": [
            [
                "3"
            ]
        ]
    },
    {
        "id": "3737305db68d21f1",
        "type": "debug",
        "z": "e3fb437742ef714e",
        "name": "debug 101",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 960,
        "wires": []
    },
    {
        "id": "2802bebb785c07a0",
        "type": "inject",
        "z": "e3fb437742ef714e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "8bc5f24a5e8fb8c1"
            ]
        ]
    },
    {
        "id": "df558cf10125df1f",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Lüftersteuerung",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "2c0b834a76c8b2fb",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Werte aus Grow (Temperatur/Licht)",
        "info": "",
        "x": 200,
        "y": 160,
        "wires": []
    },
    {
        "id": "6753fdc9b33edd51",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "globals speichern",
        "info": "",
        "x": 130,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4fda432c574826f8",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Luftbefeuchter",
        "info": "",
        "x": 120,
        "y": 780,
        "wires": []
    },
    {
        "id": "80ff4e7195806f21",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Vorgabewerte laden",
        "info": "",
        "x": 150,
        "y": 440,
        "wires": []
    },
    {
        "id": "5757b1fc3298ca01",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Verbindung zum Verlaufschart",
        "info": "",
        "x": 1340,
        "y": 440,
        "wires": []
    },
    {
        "id": "4da7b8a0f129e16a",
        "type": "deconz-output",
        "z": "e3fb437742ef714e",
        "name": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/a4:c1:38:2c:77:63:60:0e-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "at_end",
                "value": ""
            }
        },
        "x": 1130,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4ce0538edbeab457",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 780,
        "wires": [
            [
                "4da7b8a0f129e16a"
            ]
        ]
    },
    {
        "id": "da522403f180f32c",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 320,
        "wires": [
            [
                "c0e975cbbee87b07"
            ]
        ]
    },
    {
        "id": "9ab8d08ccfef1f6b",
        "type": "ui-text",
        "z": "e3fb437742ef714e",
        "group": "7eba8dcdd5856b41",
        "order": 19,
        "width": 0,
        "height": 0,
        "name": "Entlüfterstatus",
        "label": "Entüfterstatus",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1060,
        "y": 400,
        "wires": []
    },
    {
        "id": "1d3082a463f9b48a",
        "type": "change",
        "z": "e3fb437742ef714e",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "status",
                "pt": "msg",
                "to": "ui_update.label",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 400,
        "wires": [
            [
                "9ab8d08ccfef1f6b"
            ]
        ]
    },
    {
        "id": "e625b41cbc387242",
        "type": "rbe",
        "z": "e3fb437742ef714e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 990,
        "y": 480,
        "wires": [
            [
                "48e07ef408ef91f8"
            ]
        ]
    },
    {
        "id": "f67f6da3ad99922c",
        "type": "comment",
        "z": "e3fb437742ef714e",
        "name": "Ventilator",
        "info": "",
        "x": 100,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c602fbf5a9d1a39c",
        "type": "ui-text",
        "z": "e3fb437742ef714e",
        "group": "25d83088be3ee194",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "Ventilator",
        "label": "Ventilator",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 260,
        "y": 1280,
        "wires": []
    },
    {
        "id": "05dcbd42258639b0",
        "type": "ui-switch",
        "z": "e3fb437742ef714e",
        "name": "Ventilator",
        "label": "Ventilator",
        "group": "25d83088be3ee194",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": true,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 340,
        "y": 1360,
        "wires": [
            [
                "79ae0d55af0fc238",
                "1cd69c5a52946156"
            ]
        ]
    },
    {
        "id": "10b86789dec94024",
        "type": "deconz-input",
        "z": "e3fb437742ef714e",
        "name": "",
        "topic": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "default",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/a4:c1:38:9e:12:6c:7e:7c-01"
        ],
        "device_name": "",
        "query": "{}",
        "outputs": 1,
        "output_rules": [
            {
                "type": "state",
                "format": "single",
                "output": "onchange",
                "onstart": true,
                "payload": [
                    "on"
                ]
            }
        ],
        "x": 130,
        "y": 1400,
        "wires": [
            [
                "829257540c40e6dd"
            ]
        ]
    },
    {
        "id": "829257540c40e6dd",
        "type": "ui-led",
        "z": "e3fb437742ef714e",
        "name": "Status",
        "group": "25d83088be3ee194",
        "order": 14,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "79ae0d55af0fc238",
        "type": "debug",
        "z": "e3fb437742ef714e",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1500,
        "wires": []
    },
    {
        "id": "fbba56456e1b26ed",
        "type": "deconz-output",
        "z": "e3fb437742ef714e",
        "name": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/a4:c1:38:9e:12:6c:7e:7c-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "at_end",
                "value": ""
            }
        },
        "x": 670,
        "y": 1360,
        "wires": [
            [
                "79ae0d55af0fc238"
            ]
        ]
    },
    {
        "id": "b468a7689b29c824",
        "type": "function",
        "z": "e3fb437742ef714e",
        "name": "function 14",
        "func": "const tag = global.get(\"licht\");\nmsg.payload = tag;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "05dcbd42258639b0"
            ]
        ]
    },
    {
        "id": "1cd69c5a52946156",
        "type": "rbe",
        "z": "e3fb437742ef714e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "fbba56456e1b26ed"
            ]
        ]
    },
    {
        "id": "b1cb8d2091eb6c02",
        "type": "tab",
        "label": "Nährlösung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "inject-start",
        "type": "inject",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierparameter setzen",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "ad58679c20448e9e",
                "cbb4da323644b0f1",
                "e4e5fcbc95236a06",
                "6c1832c4be830aad",
                "3c25129938af06ec"
            ]
        ]
    },
    {
        "id": "function-timer",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierpause",
        "func": "const intervalms = global.get('dosierpause') * 3600 * 1000; // Pausenzeit in Millisekunden\nif (!intervalms || isNaN(intervalms)) {\n    node.error(\"Die globale Variable 'dosierpause' ist nicht definiert oder ungültig!\");\n    return null;\n}\n\n// Timer-Logik\nlet elapsedTime = 0;\nconst updateInterval = 1000; // 1 Sekunde\n\nlet timerActive = false;\n\nfunction startTimer() {\n    elapsedTime = 0;\n    timerActive = true;\n\n    let interval = setInterval(() => {\n        elapsedTime += updateInterval;\n        let remainingTime = Math.max(intervalms - elapsedTime, 0);\n\n        // Berechnung des Prozentsatzes\n        let percentage = Math.round((remainingTime / intervalms) * 100);\n\n        // Formatierung der verbleibenden Zeit\n        let hours = Math.floor(remainingTime / (1000 * 60 * 60));\n        let minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));\n        minutes = minutes.toString().padStart(2, '0');\n        let timeFormatted = `${hours}:${minutes}`;\n\n        // Status aktualisieren\n        node.status({ fill: \"green\", shape: \"dot\", text: `Restzeit: ${timeFormatted}` });\n\n        // Nachricht an Dashboard senden\n            node.send({\n                topic: \"gauge\",\n                payload: percentage, // Für Gauge als Prozentsatz\n                remainingTime: remainingTime, // Optional: verbleibende Zeit in Millisekunden\n                timeFormatted: timeFormatted\n            });\n\n        // Timer stoppen, wenn Zeit abgelaufen\n        if (remainingTime <= 0) {\n            clearInterval(interval);\n            timerActive = false;\n        }\n    }, updateInterval);\n}\n\nif (msg.payload === true) {\n    if (!timerActive) {\n        startTimer();\n    }\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "7e88297d26eac0e4",
                "ce475d79b89b4b7c"
            ]
        ]
    },
    {
        "id": "d34d0f4d3587f5fc",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierzeit",
        "func": "var duration = global.get('dosierzeit') * 60 * 1000; // y Minuten in Millisekunden\n\nif (msg.payload === true) {\n    // Aktion starten\n    let onMsg = RED.util.cloneMessage(msg); // Originalnachricht kopieren\n    onMsg.payload = \"true\";\n    node.send(onMsg);\n\n    // Zeitintervall für Gauge-Update (z. B. alle 1 Sekunde)\n    const updateInterval = 1000; // 1000 ms = 1 Sekunde\n    let elapsedTime = 0;\n\n    // Aktion nach Ablauf stoppen\n    setTimeout(() => {\n        let offMsg = RED.util.cloneMessage(msg); // Separate Nachricht für \"off\"\n        offMsg.payload = \"off\";\n        node.send(offMsg);\n    }, duration);\n\n    // Timer für Gauge-Aktualisierung\n    let interval = setInterval(() => {\n        elapsedTime += updateInterval;\n        let remainingTime = Math.max(duration - elapsedTime, 0); // Verbleibende Zeit\n        let percentage = Math.round((remainingTime / duration) * 100); // Prozentwert berechnen\n\n        let hours = Math.floor(remainingTime / (1000 * 60 * 60));\n        let minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));\n        minutes = minutes.toString().padStart(2, '0');\n        let timeFormatted = `${hours}:${minutes}`;\n\n        // Nachricht an das Dashboard senden\n        node.send({\n            topic: \"gauge\",\n            payload: percentage, // Für Gauge als Prozentsatz\n            remainingTime: remainingTime, // Optional: verbleibende Zeit in Millisekunden\n            timeFormatted: timeFormatted\n        });\n\n        node.status({ fill: \"green\", shape: \"dot\", text: `Restzeit: ${timeFormatted}` });\n\n        // Beende das Intervall, wenn die Zeit abgelaufen ist\n        if (remainingTime <= 0) {\n            clearInterval(interval);\n        }\n    }, updateInterval);\n}\n\nreturn null; // Keine weitere Nachricht zurückgeben\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 180,
        "wires": [
            [
                "a4b34a17ed6c5f2f",
                "71d5f4363fee6325"
            ]
        ]
    },
    {
        "id": "44d2554197640d51",
        "type": "ui-number-input",
        "z": "b1cb8d2091eb6c02",
        "group": "7eba8dcdd5856b41",
        "name": "Dosierpause",
        "label": "Dosierpause h",
        "order": 8,
        "width": 0,
        "height": 0,
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "12",
        "step": 1,
        "tooltip": "",
        "passthru": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 670,
        "y": 80,
        "wires": [
            [
                "8817f485053ccb6b"
            ]
        ]
    },
    {
        "id": "ceca8db84a5035af",
        "type": "ui-number-input",
        "z": "b1cb8d2091eb6c02",
        "group": "7eba8dcdd5856b41",
        "name": "Dosierzeit",
        "label": "Dosierzeit min",
        "order": 10,
        "width": 0,
        "height": 0,
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "60",
        "step": 1,
        "tooltip": "",
        "passthru": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 660,
        "y": 120,
        "wires": [
            [
                "80791d41c4c2e6bd"
            ]
        ]
    },
    {
        "id": "ad58679c20448e9e",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "global.dosierpause",
        "func": "msg.payload = global.get('dosierpause') || 4; // Standardwert auf 1 Stunde setzen, falls dosierpause nicht definiert ist\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "44d2554197640d51"
            ]
        ]
    },
    {
        "id": "cbb4da323644b0f1",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "global.dosierzeit",
        "func": "msg.payload = global.get('dosierzeit') || 10;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "ceca8db84a5035af"
            ]
        ]
    },
    {
        "id": "571fd068fb6a7d4e",
        "type": "ui-led",
        "z": "b1cb8d2091eb6c02",
        "name": "Pumpe",
        "group": "7eba8dcdd5856b41",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 1600,
        "y": 400,
        "wires": []
    },
    {
        "id": "54d156cdf6c3cca8",
        "type": "ui-switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Automatik",
        "label": "Automatik",
        "group": "7eba8dcdd5856b41",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "decouple": false,
        "topic": "Pumpe",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "auto",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "manual",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 670,
        "y": 160,
        "wires": [
            [
                "3cb37ba24b65f2dc"
            ]
        ]
    },
    {
        "id": "bc88fb9b31ab311d",
        "type": "ui-switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Manuell an",
        "label": "manuell",
        "group": "7eba8dcdd5856b41",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "Pumpe",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1010,
        "y": 480,
        "wires": [
            [
                "8d3771b32e2f91de"
            ]
        ]
    },
    {
        "id": "720751ee9f9a2757",
        "type": "ui-switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler manuell an",
        "label": "manuell",
        "group": "25d83088be3ee194",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "sprudlermanuell",
        "topicType": "global",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 480,
        "y": 1100,
        "wires": [
            [
                "b5d3daea8b376991",
                "7ad3a40b2bafc8a8",
                "37579ab367dcf6d8",
                "8538ebad79414f42"
            ]
        ]
    },
    {
        "id": "670ad59996f99284",
        "type": "ui-text-input",
        "z": "b1cb8d2091eb6c02",
        "group": "25d83088be3ee194",
        "name": "Sprudler Wartezeit",
        "label": "alle x h für 5 Min",
        "order": 12,
        "width": 0,
        "height": 0,
        "topic": "sprudlerwartezeit",
        "topicType": "global",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 430,
        "y": 880,
        "wires": [
            [
                "59282a137fee0186"
            ]
        ]
    },
    {
        "id": "4d0aa4a3891cdebf",
        "type": "debug",
        "z": "b1cb8d2091eb6c02",
        "name": "debug 98",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 860,
        "wires": []
    },
    {
        "id": "a4b34a17ed6c5f2f",
        "type": "ui-gauge-linear",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierzeit",
        "group": "7eba8dcdd5856b41",
        "order": 9,
        "width": 0,
        "height": 0,
        "min": 0,
        "max": "100",
        "ticks": [],
        "colors": [
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            }
        ],
        "zeroCrossColors": [
            "#ff4c16",
            "#00e300"
        ],
        "mode": "default",
        "bar": "segmented",
        "minLabel": "",
        "maxLabel": "",
        "label": "Dosierzeit",
        "icon": "",
        "unit": "%",
        "dim": 0.2,
        "property": "payload",
        "decimals": "2",
        "zeros": true,
        "myclass": "hide-value",
        "x": 1600,
        "y": 160,
        "wires": []
    },
    {
        "id": "ce475d79b89b4b7c",
        "type": "ui-gauge-linear",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierpause",
        "group": "7eba8dcdd5856b41",
        "order": 7,
        "width": 0,
        "height": 0,
        "min": 0,
        "max": "100",
        "ticks": [],
        "colors": [
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            },
            {
                "size": 100,
                "color": "rgb(0, 227, 0)"
            }
        ],
        "zeroCrossColors": [
            "#ff4c16",
            "#00e300"
        ],
        "mode": "default",
        "bar": "segmented",
        "minLabel": "",
        "maxLabel": "",
        "label": "Dosierpause",
        "icon": "",
        "unit": "%",
        "dim": 0.2,
        "property": "payload",
        "decimals": "2",
        "zeros": true,
        "myclass": "hide-value",
        "x": 1710,
        "y": 300,
        "wires": []
    },
    {
        "id": "84eb9b19d2f8d820",
        "type": "ui-text",
        "z": "b1cb8d2091eb6c02",
        "group": "7eba8dcdd5856b41",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "lbl_nährlösung",
        "label": "Nährstoffpumpe",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 500,
        "y": 40,
        "wires": []
    },
    {
        "id": "b38bd2e9e0b3eae1",
        "type": "ui-text",
        "z": "b1cb8d2091eb6c02",
        "group": "25d83088be3ee194",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "lbl_sprudler",
        "label": "Sprudler",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 150,
        "y": 860,
        "wires": []
    },
    {
        "id": "9b1db7b2083dbfb2",
        "type": "ui-switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler Automatik",
        "label": "Automatik",
        "group": "25d83088be3ee194",
        "order": 10,
        "width": "0",
        "height": "0",
        "passthru": true,
        "decouple": false,
        "topic": "SprudlerAuto",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "START",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "STOP",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 430,
        "y": 780,
        "wires": [
            [
                "76f662f30a4be353"
            ]
        ]
    },
    {
        "id": "b5d3daea8b376991",
        "type": "ui-led",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler Status",
        "group": "25d83088be3ee194",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "off",
                "valueType": "str",
                "color": "#ff0000"
            },
            {
                "value": "on",
                "valueType": "str",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 1280,
        "y": 980,
        "wires": []
    },
    {
        "id": "3cb37ba24b65f2dc",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Modus speichern",
        "rules": [
            {
                "t": "set",
                "p": "mode_nl",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8d3771b32e2f91de",
        "type": "switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Nur im manuellen Modus",
        "property": "mode_nl",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "manual",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "571fd068fb6a7d4e",
                "39c1c21876202b4a",
                "201896c1fdcf5471"
            ]
        ]
    },
    {
        "id": "27eb3d09af904f1a",
        "type": "switch",
        "z": "b1cb8d2091eb6c02",
        "name": "Nur im automatischen Modus",
        "property": "mode_nl",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "auto",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 240,
        "wires": [
            [
                "571fd068fb6a7d4e",
                "39c1c21876202b4a",
                "d34d0f4d3587f5fc",
                "544ab01d33c225a3",
                "0bad8b04931cb0e3"
            ]
        ]
    },
    {
        "id": "4b593afa5cace10d",
        "type": "inject",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "STOP",
        "payloadType": "str",
        "x": 210,
        "y": 980,
        "wires": [
            [
                "6ca3d35a8275d516",
                "bcac467016c163e7"
            ]
        ]
    },
    {
        "id": "6ca3d35a8275d516",
        "type": "controltimer",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "timerType": "loop",
        "timerDurationUnit": "hour",
        "timerDurationType": "num",
        "timerDuration": 1,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 650,
        "y": 920,
        "wires": [
            [
                "789981d287016e8c",
                "4d0aa4a3891cdebf",
                "587265347454012c"
            ],
            [
                "4d0aa4a3891cdebf"
            ]
        ]
    },
    {
        "id": "bcac467016c163e7",
        "type": "controltimer",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "timerType": "delay",
        "timerDurationUnit": "minute",
        "timerDurationType": "num",
        "timerDuration": 5,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": true,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 840,
        "y": 980,
        "wires": [
            [
                "5a9864be1d25142e"
            ],
            []
        ]
    },
    {
        "id": "5a9864be1d25142e",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler aus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sprudler",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "b5d3daea8b376991",
                "7ad3a40b2bafc8a8",
                "8538ebad79414f42"
            ]
        ]
    },
    {
        "id": "789981d287016e8c",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler an",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sprudler",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "b5d3daea8b376991",
                "7ad3a40b2bafc8a8",
                "8538ebad79414f42"
            ]
        ]
    },
    {
        "id": "4f52fd715d0f4cd1",
        "type": "link out",
        "z": "b1cb8d2091eb6c02",
        "name": "Nährstoffpumpe",
        "mode": "link",
        "links": [
            "3c3d663debef8493"
        ],
        "x": 1815,
        "y": 480,
        "wires": []
    },
    {
        "id": "59282a137fee0186",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Wartezeit neu setzen",
        "func": "let sprudlerwartezeit = Number(msg.payload);\nmsg.timerDuration =  sprudlerwartezeit;\nmsg.payload = 'START';\nmsg.timerType = 'loop'; // 'delay', 'loop'\nmsg.timerDurationUnit = 'hour'; // 'millisecond', 'second', 'minute', 'hour'\n\nglobal.set(\"sprudlerwartezeit\", sprudlerwartezeit);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 920,
        "wires": [
            [
                "6ca3d35a8275d516"
            ]
        ]
    },
    {
        "id": "76f662f30a4be353",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "global Wartezeit lesen",
        "func": "if(msg.payload == \"START\")\n{\nconst sprudlerwartezeit = Number(global.get(\"sprudlerwartezeit\"));\nmsg.payload = sprudlerwartezeit\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 840,
        "wires": [
            [
                "670ad59996f99284"
            ]
        ]
    },
    {
        "id": "587265347454012c",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "msg bereinigen",
        "rules": [
            {
                "t": "delete",
                "p": "timerDuration",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "timerType",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "timerDurationUnit",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 980,
        "wires": [
            [
                "bcac467016c163e7"
            ]
        ]
    },
    {
        "id": "a5ae7139e5142f3e",
        "type": "comment",
        "z": "b1cb8d2091eb6c02",
        "name": "Weiterleitung zum Verlauf Chart",
        "info": "",
        "x": 1710,
        "y": 520,
        "wires": []
    },
    {
        "id": "de6a2a1f67ea6de7",
        "type": "comment",
        "z": "b1cb8d2091eb6c02",
        "name": "Nährstoffpumpensteuerung",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "71a5494b963a191b",
        "type": "comment",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudlersteuerung",
        "info": "",
        "x": 210,
        "y": 720,
        "wires": []
    },
    {
        "id": "7ad3a40b2bafc8a8",
        "type": "link out",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler Verlauf",
        "mode": "link",
        "links": [
            "b21e60ea48f18a71"
        ],
        "x": 1265,
        "y": 1040,
        "wires": []
    },
    {
        "id": "37579ab367dcf6d8",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sprudler",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1080,
        "wires": [
            [
                "7ad3a40b2bafc8a8"
            ]
        ]
    },
    {
        "id": "8817f485053ccb6b",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "set dosierpause",
        "func": "global.set(\"dosierpause\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "80791d41c4c2e6bd",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "set dosierpause",
        "func": "global.set(\"dosierzeit\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8538ebad79414f42",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "on",
                "fromt": "str",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "off",
                "fromt": "str",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 940,
        "wires": [
            [
                "767c9e5a371d5b50"
            ]
        ]
    },
    {
        "id": "39c1c21876202b4a",
        "type": "deconz-output",
        "z": "b1cb8d2091eb6c02",
        "name": "Nährlösung",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/70:b3:d5:2b:60:11:91:15-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "after_command",
                "value": ""
            }
        },
        "x": 1610,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "767c9e5a371d5b50",
        "type": "deconz-output",
        "z": "b1cb8d2091eb6c02",
        "name": "Sprudler",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "auto",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/70:b3:d5:2b:60:0f:bd:84-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "after_command",
                "value": ""
            }
        },
        "x": 1600,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "24221707f1610ac1",
        "type": "ui-number-input",
        "z": "b1cb8d2091eb6c02",
        "group": "1ef18b1110bc55e6",
        "name": "Anfangsleitfähigkeit",
        "label": "Anfangsleitfähigkeit",
        "order": 4,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "5000",
        "step": 1,
        "tooltip": "",
        "passthru": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 690,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7d1ee7e34c78f89d",
        "type": "ui-text",
        "z": "b1cb8d2091eb6c02",
        "group": "1ef18b1110bc55e6",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Dosierpause",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1710,
        "y": 260,
        "wires": []
    },
    {
        "id": "7e88297d26eac0e4",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "timeFormatted",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 260,
        "wires": [
            [
                "7d1ee7e34c78f89d"
            ]
        ]
    },
    {
        "id": "476d933df71157f5",
        "type": "ui-text",
        "z": "b1cb8d2091eb6c02",
        "group": "1ef18b1110bc55e6",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Dosierzeit",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1860,
        "y": 200,
        "wires": []
    },
    {
        "id": "71d5f4363fee6325",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "timeFormatted",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 200,
        "wires": [
            [
                "476d933df71157f5"
            ]
        ]
    },
    {
        "id": "c55b1f0304b65280",
        "type": "inject",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierung starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "3fe396eea2752e33"
            ]
        ]
    },
    {
        "id": "e4e5fcbc95236a06",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierung Auto/Man",
        "func": "msg.payload = global.get('mode_nl') || \"auto\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "54d156cdf6c3cca8"
            ]
        ]
    },
    {
        "id": "201896c1fdcf5471",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Topic Pumpe",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Pumpe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 480,
        "wires": [
            [
                "544ab01d33c225a3"
            ]
        ]
    },
    {
        "id": "544ab01d33c225a3",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "4f52fd715d0f4cd1"
            ]
        ]
    },
    {
        "id": "d1dfb1124dfc0439",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 320,
        "wires": [
            [
                "function-timer"
            ]
        ]
    },
    {
        "id": "89df4e921d3b6a10",
        "type": "ui-button",
        "z": "b1cb8d2091eb6c02",
        "group": "7eba8dcdd5856b41",
        "name": "",
        "label": "Automatik zurücksetzen",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "3fe396eea2752e33"
            ]
        ]
    },
    {
        "id": "3fe396eea2752e33",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierzeit setzen",
        "func": "let dosierzeit = global.get('dosierzeit') || 10;\nmsg.timerType = \"delay\";\nmsg.timerDurationUnit = \"minute\";\nmsg.timerDuration = dosierzeit;\nmsg.payload = \"START\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "b745789d82c4ae3d",
                "5e6e5fdd8d7b4273"
            ]
        ]
    },
    {
        "id": "b745789d82c4ae3d",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Pumpe an",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "x": 930,
        "y": 240,
        "wires": [
            [
                "27eb3d09af904f1a"
            ]
        ]
    },
    {
        "id": "5e6e5fdd8d7b4273",
        "type": "controltimer",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierzeit",
        "timerType": "delay",
        "timerDurationUnit": "second",
        "timerDurationType": "num",
        "timerDuration": 30,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "5e4d5c9f8a84c997",
                "1124dcda40ddb419"
            ],
            []
        ]
    },
    {
        "id": "5e4d5c9f8a84c997",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Pumpe aus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "27eb3d09af904f1a"
            ]
        ]
    },
    {
        "id": "1124dcda40ddb419",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierpause setzen",
        "func": "let dosierpause = global.get('dosierpause') || 3;\nmsg.timerType = \"delay\";\nmsg.timerDurationUnit = \"hour\";\nmsg.timerDuration = dosierpause;\nmsg.payload = \"START\";\n\nreturn msg;",
        "outputs": 1,
        "x": 540,
        "y": 360,
        "wires": [
            [
                "8a2b6e46ff4c9f4d",
                "d1dfb1124dfc0439"
            ]
        ]
    },
    {
        "id": "8a2b6e46ff4c9f4d",
        "type": "controltimer",
        "z": "b1cb8d2091eb6c02",
        "name": "Dosierpause",
        "timerType": "delay",
        "timerDurationUnit": "minute",
        "timerDurationType": "num",
        "timerDuration": 2,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": true,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": false,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": true,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": true,
        "isContinueActionEnabled": true,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "baafed640da58fee"
            ],
            []
        ]
    },
    {
        "id": "baafed640da58fee",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Neustart",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "START",
                "tot": "str"
            }
        ],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "3fe396eea2752e33"
            ]
        ]
    },
    {
        "id": "6c1832c4be830aad",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "global.CELL_CONSTANT",
        "func": "msg.payload = global.get('CELL_CONSTANT') || 6.718; // Standardwert auf 1 Stunde setzen, falls dosierpause nicht definiert ist\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "bb2cac2b8ab19576"
            ]
        ]
    },
    {
        "id": "bb2cac2b8ab19576",
        "type": "ui-text-input",
        "z": "b1cb8d2091eb6c02",
        "group": "1ef18b1110bc55e6",
        "name": "Zellkonstante",
        "label": "Zellkonstante",
        "order": 6,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "6951930284b74c37"
            ]
        ]
    },
    {
        "id": "40ce302fdafbff3f",
        "type": "debug",
        "z": "b1cb8d2091eb6c02",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 580,
        "wires": []
    },
    {
        "id": "6951930284b74c37",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "set CELL_CONSTANT",
        "func": "let value = parseFloat(msg.payload);  // String in eine Zahl umwandeln\nif (!isNaN(value)) {\n    value = parseFloat(value.toFixed(4));  // Auf 4 Nachkommastellen begrenzen\n    global.set(\"CELL_CONSTANT\", value);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cb35b2b08146b1e5",
        "type": "inject",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "STOP",
        "payloadType": "str",
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "6ca3d35a8275d516",
                "bcac467016c163e7"
            ]
        ]
    },
    {
        "id": "a0cc0f3a18d86d6d",
        "type": "ui-text-input",
        "z": "b1cb8d2091eb6c02",
        "group": "1ef18b1110bc55e6",
        "name": "letzter pH-Wert",
        "label": "letzter pH-Wert",
        "order": 5,
        "width": 0,
        "height": 0,
        "topic": "phwert",
        "topicType": "global",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 680,
        "y": 240,
        "wires": [
            [
                "63990f1e4713a98c"
            ]
        ]
    },
    {
        "id": "0bad8b04931cb0e3",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "Zyklus setzen",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "dc431ffc29a30a58"
            ]
        ]
    },
    {
        "id": "f1e7b87d700ca0a5",
        "type": "influxdb out",
        "z": "b1cb8d2091eb6c02",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "letzer pH",
        "measurement": "ph",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "dc431ffc29a30a58",
        "type": "influxdb out",
        "z": "b1cb8d2091eb6c02",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "Ebbe/Flut",
        "measurement": "zyklus",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1340,
        "y": 360,
        "wires": []
    },
    {
        "id": "63990f1e4713a98c",
        "type": "change",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(payload) ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 360,
        "wires": [
            [
                "f1e7b87d700ca0a5"
            ]
        ]
    },
    {
        "id": "3c25129938af06ec",
        "type": "influxdb in",
        "z": "b1cb8d2091eb6c02",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "letzten pH lesen",
        "query": "SELECT LAST(value) AS PH FROM ph;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "b05356166d169d0f"
            ]
        ]
    },
    {
        "id": "b05356166d169d0f",
        "type": "function",
        "z": "b1cb8d2091eb6c02",
        "name": "function 16",
        "func": "let ph = msg.payload[0].value;\nmsg.payload = ph;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "40ce302fdafbff3f",
                "a0cc0f3a18d86d6d"
            ]
        ]
    },
    {
        "id": "cf71b88974053b26",
        "type": "inject",
        "z": "b1cb8d2091eb6c02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 780,
        "wires": [
            [
                "9b1db7b2083dbfb2"
            ]
        ]
    },
    {
        "id": "c1d3b8a0.b23f98",
        "type": "tab",
        "label": "Ebbe-Flut Analyse",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c91b01d3.4c1d6",
        "type": "function",
        "z": "c1d3b8a0.b23f98",
        "name": "Analyse der Messwerte",
        "func": "// 📥 Original-Payload aus der InfluxDB-Abfrage\nlet daten = msg.payload;\n\nif (!Array.isArray(daten) || daten.length === 0) {\n    msg.payload = { status: \"Keine historischen Daten verfügbar.\" };\n    return msg;\n}\n\n// 🌊 Filtern: Nur Werte mit `Zyklus === 0`\nlet gefilterteWasserstandDaten = daten.filter(d => d.Zyklus === 0);\n\n// 📉 Funktion zur Berechnung des Trends (lineare Regression)\nfunction berechneTrend(daten, feld) {\n    if (daten.length < 2) return 0; // Zu wenige Daten für Trend\n\n    let n = daten.length;\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\n\n    for (let i = 0; i < n; i++) {\n        let x = i; // Zeitindex (relative Reihenfolge)\n        let y = Number(daten[i][feld]); // Messwert\n        if (isNaN(y)) return 0;\n        sumX += x;\n        sumY += y;\n        sumXY += x * y;\n        sumX2 += x * x;\n    }\n\n    let m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    return m;\n}\n\n// 📈 Berechnung der Trends\nlet wasserstandTrend = berechneTrend(gefilterteWasserstandDaten, \"Level\");\nlet ecTrend = berechneTrend(daten, \"EC\");  // Alle EC-Werte nutzen\nlet phTrend = berechneTrend(daten, \"PH\");  // Falls PH vorhanden ist\n\n// 🏷️ Trend-Klassifikation\nlet wasserstandStatus = wasserstandTrend > 0.5 ? \"steigend\" : wasserstandTrend < -0.5 ? \"fallend\" : \"statisch\";\nlet ecStatus = ecTrend > 0.5 ? \"steigend\" : ecTrend < -0.5 ? \"fallend\" : \"statisch\";\nlet phStatus = phTrend > 0.05 ? \"steigend\" : phTrend < -0.05 ? \"fallend\" : \"statisch\";\n\n// 📋 Diagnose & Problemerkennung (Beispielhafte Zuordnung)\nlet status = \"\";\nif (wasserstandStatus === \"statisch\" && ecStatus === \"statisch\" && phStatus === \"statisch\") {\n    status = \"Die Pflanze nimmt nichts auf, wechsle die Nährlösung.Überprüfe die Wurzeln, möglicherweise sterben sie ab.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"statisch\" && phStatus === \"steigend\") {\n    status = \"Die Pflanze nimmt Wasser auf, aber keine Nährstoffe. Erhöhe die Nährstoffkonzentration.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"statisch\" && phStatus === \"fallend\") {\n    status = \"Die Pflanze nimmt Nährstoffe auf, aber kaum Wasser.Reduziere die Nährstoffkonzentration.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"steigend\" && phStatus === \"statisch\") {\n    status = \"Salzgehalt steigend, möglicherweise durch Verdunstung oder zu starke Düngung. Füge Wasser hinzu.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"steigend\" && phStatus === \"steigend\") {\n    status = \"Die Pflanze nimmt keine Nährstoffe auf, Salzgehalt steigend, möglicherweise Nährstoffblockade. Spüle mit klarem Wasser und passe die Nährlösung an.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"steigend\" && phStatus === \"fallend\") {\n    status = \"Nährstoffaufnahme, aber pH-Wert sinkt. Überprüfe die Pufferkapazität der Nährlösung.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"fallend\" && phStatus === \"statisch\") {\n    status = \"Die Pflanze nimmt weniger Nährstoffe auf, möglicherweise Unterversorgung. Erhöhe die Nährstoffkonzentration leicht.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"fallend\" && phStatus === \"steigend\") {\n    status = \"Die Pflanze nimmt Wasser auf, aber kaum Nährstoffe. Erhöhe die Nährstoffkonzentration.\";\n} else if (wasserstandStatus === \"statisch\" && ecStatus === \"fallend\" && phStatus === \"fallend\") {\n    status = \"Pflanze nimmt Nährstoffe auf, aber die Nährlösung könnte zu stark verdünnt sein. Überprüfe die Düngung.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"statisch\" && phStatus === \"statisch\") {\n    status = \"Pflanze trinkt und nimmt Nährstoffe im gleichen Verhältnis auf, keine Änderung nötig.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"statisch\" && phStatus === \"steigend\") {\n    status = \"Pflanze trinkt, aber nimmt nicht genug Nährstoffe auf. Erhöhe die Nährstoffkonzentration.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"statisch\" && phStatus === \"fallend\") {\n    status = \"Pflanze nimmt zu viele Nährstoffe auf, EC senken.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"steigend\" && phStatus === \"statisch\") {\n    status = \"Zu viel Salz im Wasser, EC reduzieren, frisches Wasser hinzufügen.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"steigend\" && phStatus === \"steigend\") {\n    status = \"Nährstoffkonzentration steigend, möglicherweise Blockade. Spüle das System und passe die Nährlösung an.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"steigend\" && phStatus === \"fallend\") {\n    status = \"EC steigend, pH fallend, mögliche Überdüngung. Spüle und senke die EC leicht.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"fallend\" && phStatus === \"statisch\") {\n    status = \"Pflanze nimmt mehr Nährstoffe auf als Wasser. Möglicherweise Unterversorgung. EC leicht erhöhen.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"fallend\" && phStatus === \"steigend\") {\n    status = \"Pflanze trinkt, aber nimmt wenig Nährstoffe auf. Erhöhe die Nährstoffkonzentration.\";\n} else if (wasserstandStatus === \"fallend\" && ecStatus === \"fallend\" && phStatus === \"fallend\") {\n    status = \"Nährstoffkonzentration zu niedrig, EC leicht erhöhen.\";\n} else {\n    status = \"zu wenig Daten für eine Analyse\"\n}\n\n// 📤 Ergebnis zurückgeben\nmsg.payload = {\n    status: status,\n    trends: {\n        wasserstand: wasserstandStatus,\n        ec: ecStatus,\n        ph: phStatus\n    },\n    wasserstandTrend: wasserstandTrend,\n    ecTrend: ecTrend,\n    phTrend: phTrend\n    // zyklus: zyklus\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            [
                "f01e56a3.4e6a38",
                "402254b745a2c4ae"
            ]
        ]
    },
    {
        "id": "f01e56a3.4e6a38",
        "type": "debug",
        "z": "c1d3b8a0.b23f98",
        "name": "Debug-Ausgabe",
        "active": true,
        "complete": "payload",
        "x": 900,
        "y": 100,
        "wires": []
    },
    {
        "id": "c7aac4f8831cae7c",
        "type": "inject",
        "z": "c1d3b8a0.b23f98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "e6f6219b873f2d1c"
            ]
        ]
    },
    {
        "id": "e95ab4039d5e5f7d",
        "type": "ui-text",
        "z": "c1d3b8a0.b23f98",
        "group": "1ef18b1110bc55e6",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Zustand",
        "label": "Zustand",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Arial Narrow,Nimbus Sans L,sans-serif",
        "fontSize": "12",
        "color": "#717171",
        "wrapText": true,
        "className": "",
        "x": 1100,
        "y": 60,
        "wires": []
    },
    {
        "id": "402254b745a2c4ae",
        "type": "change",
        "z": "c1d3b8a0.b23f98",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 60,
        "wires": [
            [
                "e95ab4039d5e5f7d"
            ]
        ]
    },
    {
        "id": "e6f6219b873f2d1c",
        "type": "influxdb in",
        "z": "c1d3b8a0.b23f98",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "query": "SELECT mean(\"tankEC\") AS \"EC\", mean(\"tankPH\") AS \"PH\", mean(\"tankLevel\") AS \"Level\", mean(\"tankTemp\") AS \"Temp\", mean(\"tankZyklus\") AS \"Zyklus\" FROM \"growctl\" WHERE time > now() - 6h GROUP BY time(1h) fill(previous)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "c91b01d3.4c1d6"
            ]
        ]
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Grafana Verlauf",
        "disabled": false,
        "info": ""
    },
    {
        "id": "de8150aa.71733",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "SetTimeRange",
        "func": "msg.fromdate=msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 80,
        "wires": [
            [
                "aeaaadf4.7dcb",
                "9d22cca6.a6c168"
            ]
        ]
    },
    {
        "id": "aeaaadf4.7dcb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "BuildTemplate",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\nlet url = \"http://192.168.178.100:3000/d-solo/fad0e490-16e3-4c7e-94b5-e873d457fb5d/growbox?orgId=1&refresh=5s&theme=light&panelId=1\" + \"&from=\" + msg.fromdate + \"&to=now\";\nmsg.src = url;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 60,
        "wires": [
            [
                "118d8d74464c178e"
            ]
        ]
    },
    {
        "id": "9d22cca6.a6c168",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "BuildTemplate",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\nlet url = \"http://192.168.178.100:3000/d-solo/fad0e490-16e3-4c7e-94b5-e873d457fb5d/growbox?orgId=1&refresh=5s&theme=light&panelId=4\" + \"&from=\" + msg.fromdate + \"&to=now\";\nmsg.src = url;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [
            [
                "07b9f130dc9caaea"
            ]
        ]
    },
    {
        "id": "b372fba84ebeb01e",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Trigger on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "now-12h",
        "payloadType": "str",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "b474a8055f2159d5"
            ]
        ]
    },
    {
        "id": "118d8d74464c178e",
        "type": "ui-iframe",
        "z": "f6f2187d.f17ca8",
        "name": "Nährlösung",
        "group": "54ed1fdbd65f445e",
        "order": 2,
        "src": "http://192.168.178.100:3000/d-solo/fad0e490-16e3-4c7e-94b5-e873d457fb5d/growbox?orgId=1&refresh=5s&theme=light&panelId=1",
        "width": "12",
        "height": 8,
        "x": 1050,
        "y": 60,
        "wires": []
    },
    {
        "id": "b474a8055f2159d5",
        "type": "ui-dropdown",
        "z": "f6f2187d.f17ca8",
        "group": "54ed1fdbd65f445e",
        "name": "",
        "label": "Zeitbereich",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "1h",
                "value": "now-1h",
                "type": "str"
            },
            {
                "label": "3h",
                "value": "now-3h",
                "type": "str"
            },
            {
                "label": "12h",
                "value": "now-12h",
                "type": "str"
            },
            {
                "label": "24h",
                "value": "now-24h",
                "type": "str"
            },
            {
                "label": "2d",
                "value": "now-2d",
                "type": "str"
            },
            {
                "label": "7d",
                "value": "now-7d",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "de8150aa.71733"
            ]
        ]
    },
    {
        "id": "07b9f130dc9caaea",
        "type": "ui-iframe",
        "z": "f6f2187d.f17ca8",
        "name": "Klima",
        "group": "54ed1fdbd65f445e",
        "order": 3,
        "src": "http://192.168.178.100:3000/d-solo/fad0e490-16e3-4c7e-94b5-e873d457fb5d/growbox?orgId=1&refresh=5s&from=1741771857051&to=1741815057051&theme=light&panelId=4",
        "width": "12",
        "height": 8,
        "x": 1030,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd798a6de80d662a",
        "type": "tab",
        "label": "Tankdaten schreiben",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cbd8e06760845b1d",
        "type": "function",
        "z": "fd798a6de80d662a",
        "name": "Tank2InfluxDB",
        "func": "//msg.measurement = \"growctl\";\n\n// Überprüfe, ob alle Felder numerisch sind\nmsg.payload = [\n    {\n        tankZyklus: msg.payload.zyklus || 0,  // Zahl umwandeln\n        tankTemp: parseFloat(msg.payload[\"tele/TankCtl/SENSOR\"].DS18B20.Temperature) || 0,\n        tankLevel: parseFloat(msg.payload[\"tele/TankCtl/SENSOR\"].Tankinhalt[\"Füllstand\"]) || 0,\n        tankEC: parseFloat(msg.payload[\"tele/TankCtl/SENSOR\"].CQRSENEC01.EC) || 0,\n        tankPH: parseFloat(msg.payload.ph) || 6\n    }];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "ddd6c4c3147bad9d"
            ]
        ]
    },
    {
        "id": "ab3fcbae77a18b58",
        "type": "join",
        "z": "fd798a6de80d662a",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "cbd8e06760845b1d"
            ]
        ]
    },
    {
        "id": "9dc9cc9c8b309eed",
        "type": "function",
        "z": "fd798a6de80d662a",
        "name": "bool2int",
        "func": "function booleanToInt(value) {\n    return value ? 1 : 0;\n}\nmsg.topic = \"zyklus\"\nmsg.payload = booleanToInt(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "ab3fcbae77a18b58"
            ]
        ]
    },
    {
        "id": "9ac8f8bfb255be74",
        "type": "mqtt in",
        "z": "fd798a6de80d662a",
        "name": "",
        "topic": "tele/TankCtl/SENSOR",
        "qos": "2",
        "datatype": "json",
        "broker": "305274af24bc1a26",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "ab3fcbae77a18b58"
            ]
        ]
    },
    {
        "id": "2513ae7ca47e5d09",
        "type": "deconz-input",
        "z": "fd798a6de80d662a",
        "name": "",
        "topic": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "default",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/70:b3:d5:2b:60:11:91:15-01"
        ],
        "device_name": "",
        "query": "{}",
        "outputs": 1,
        "output_rules": [
            {
                "type": "state",
                "format": "single",
                "output": "always",
                "onstart": true,
                "payload": [
                    "on"
                ]
            }
        ],
        "x": 150,
        "y": 200,
        "wires": [
            [
                "9dc9cc9c8b309eed"
            ]
        ]
    },
    {
        "id": "e3015750e76a8197",
        "type": "debug",
        "z": "fd798a6de80d662a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 400,
        "wires": []
    },
    {
        "id": "9200737dcbe24c57",
        "type": "inject",
        "z": "fd798a6de80d662a",
        "name": "letzten pH lesen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "ph",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "a4cdd8cec28189c9"
            ]
        ]
    },
    {
        "id": "ddd6c4c3147bad9d",
        "type": "influxdb out",
        "z": "fd798a6de80d662a",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "measurement": "growctl",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "9543eb69104566eb",
        "type": "influxdb in",
        "z": "fd798a6de80d662a",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "",
        "query": "SELECT mean(\"tankEC\") AS \"EC\", mean(\"tankLevel\") AS \"Level\", mean(\"tankTemp\") AS \"Temp\", mean(\"tankZyklus\") AS \"Zyklus\" FROM \"growctl\" WHERE time > now() - 12h GROUP BY time(1h) fill(previous)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "e3015750e76a8197"
            ]
        ]
    },
    {
        "id": "2c0613522050742d",
        "type": "inject",
        "z": "fd798a6de80d662a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "9543eb69104566eb"
            ]
        ]
    },
    {
        "id": "a4cdd8cec28189c9",
        "type": "influxdb in",
        "z": "fd798a6de80d662a",
        "influxdb": "b86d63f3f59dd4c8",
        "name": "SELECT LAST(value) AS PH FROM ph;",
        "query": "SELECT LAST(value) AS PH FROM ph;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 480,
        "y": 60,
        "wires": [
            [
                "d1517bda1aec5ab0"
            ]
        ]
    },
    {
        "id": "d1517bda1aec5ab0",
        "type": "function",
        "z": "fd798a6de80d662a",
        "name": "pH Topic und Payload",
        "func": "msg.payload = msg.payload[0].PH;\nmsg.topic = \"ph\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 60,
        "wires": [
            [
                "ab3fcbae77a18b58"
            ]
        ]
    },
    {
        "id": "30aaf3edcef601c3",
        "type": "tab",
        "label": "Humidor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "86befdbe11d0a2e7",
        "type": "debug",
        "z": "30aaf3edcef601c3",
        "name": "debug 95",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "9df8dd3a3dc3cba5",
        "type": "ui-gauge",
        "z": "30aaf3edcef601c3",
        "name": "Luftfeuchte",
        "group": "b09e345c96b25a66",
        "order": 5,
        "width": "4",
        "height": "4",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Luftfeuchte",
        "units": "% rH",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "50",
                "color": "#5cd65c"
            },
            {
                "from": "60",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "af10863f47d9a980",
        "type": "deconz-output",
        "z": "30aaf3edcef601c3",
        "name": "",
        "config_version": 2,
        "server": "ceede262f965aceb",
        "statustext": "",
        "statustext_type": "default",
        "search_type": "device",
        "device_list": [
            "lights/uniqueid/00:12:4b:00:2f:8d:6b:90-01"
        ],
        "device_name": "",
        "query": "{}",
        "commands": [
            {
                "arg": {
                    "on": {
                        "type": "msg",
                        "value": "payload"
                    },
                    "alert": {
                        "type": "str",
                        "value": ""
                    },
                    "effect": {
                        "type": "str",
                        "value": ""
                    },
                    "colorloopspeed": {
                        "type": "num",
                        "value": ""
                    },
                    "transitiontime": {
                        "type": "num",
                        "value": ""
                    },
                    "retryonerror": {
                        "type": "num",
                        "value": "0"
                    },
                    "aftererror": {
                        "type": "continue",
                        "value": ""
                    },
                    "bri": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "sat": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "hue": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "ct": {
                        "direction": "set",
                        "type": "num",
                        "value": ""
                    },
                    "xy": {
                        "direction": "set",
                        "type": "json",
                        "value": "[]"
                    }
                },
                "type": "deconz_state",
                "domain": "lights",
                "uniqueId": "ui-id-5"
            }
        ],
        "specific": {
            "delay": {
                "type": "num",
                "value": "50"
            },
            "result": {
                "type": "at_end",
                "value": ""
            }
        },
        "x": 670,
        "y": 360,
        "wires": [
            [
                "acf00b2c848ca4fc",
                "2568ee0a19ac0594"
            ]
        ]
    },
    {
        "id": "49393115d527dffc",
        "type": "inject",
        "z": "30aaf3edcef601c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "schalter",
        "payload": "false",
        "payloadType": "bool",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "2074033216f1a23e"
            ]
        ]
    },
    {
        "id": "7c4815dca905ecd0",
        "type": "ui-gauge",
        "z": "30aaf3edcef601c3",
        "name": "Temperatur",
        "group": "b09e345c96b25a66",
        "order": 4,
        "width": "4",
        "height": "4",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperatur",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "00",
                "color": "#ffc800"
            },
            {
                "from": "15",
                "color": "#5cd65c"
            },
            {
                "from": "20",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1210,
        "y": 100,
        "wires": []
    },
    {
        "id": "a26199561e1293a3",
        "type": "ui-chart",
        "z": "30aaf3edcef601c3",
        "group": "53b781953102758d",
        "name": "Verlauf",
        "label": "",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "12",
        "className": "",
        "interpolation": "linear",
        "x": 1190,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "836ad6feafff03c8",
        "type": "function",
        "z": "30aaf3edcef601c3",
        "name": "Feuchte > 76",
        "func": "var feuchte = msg.payload.AM2301.Humidity;\nif (feuchte > 62)\n    {msg.payload = true}\nelse\n    {msg.payload = false}    \nmsg.topic = \"hum\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "1a1122b7a1822014"
            ]
        ]
    },
    {
        "id": "1980c78cb0c86ea4",
        "type": "inject",
        "z": "30aaf3edcef601c3",
        "name": "Charts löschen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 880,
        "y": 220,
        "wires": [
            [
                "a26199561e1293a3"
            ]
        ]
    },
    {
        "id": "2074033216f1a23e",
        "type": "ui-switch",
        "z": "30aaf3edcef601c3",
        "name": "",
        "label": "Lüfter (Hand)",
        "group": "b09e345c96b25a66",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": false,
        "topic": "schalter",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "1a1122b7a1822014"
            ]
        ]
    },
    {
        "id": "63998d6c747721fc",
        "type": "inject",
        "z": "30aaf3edcef601c3",
        "name": "alle 2h",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "930bafb215cf794f"
            ]
        ]
    },
    {
        "id": "930bafb215cf794f",
        "type": "eztimer",
        "z": "30aaf3edcef601c3",
        "name": "",
        "debug": false,
        "autoname": " + 00:15:00",
        "tag": "eztimer",
        "topic": "zeit",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": false,
        "ontype": "9",
        "ontimesun": "dawn",
        "ontimetod": "17:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "bool",
        "onvalue": "true",
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": true,
        "offtype": "3",
        "offtimesun": "dusk",
        "offtimetod": "dusk",
        "offduration": "00:15:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "bool",
        "offvalue": "false",
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": true,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 440,
        "wires": [
            [
                "1a1122b7a1822014"
            ]
        ]
    },
    {
        "id": "acf00b2c848ca4fc",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "Payload Lüfter Verlauf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Lüfter",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.0.result.on",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 300,
        "wires": [
            [
                "0dd676b67ac4c617"
            ]
        ]
    },
    {
        "id": "0dd676b67ac4c617",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "True/False 1/0",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 300,
        "wires": [
            [
                "a26199561e1293a3"
            ]
        ]
    },
    {
        "id": "37d378496a450135",
        "type": "ui-led",
        "z": "30aaf3edcef601c3",
        "name": "Lüfter",
        "group": "b09e345c96b25a66",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Lüfter",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": true,
        "x": 1350,
        "y": 420,
        "wires": []
    },
    {
        "id": "2568ee0a19ac0594",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "Payload Lüfter An/Aus",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.0.result.on",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "37d378496a450135"
            ]
        ]
    },
    {
        "id": "1a1122b7a1822014",
        "type": "BooleanLogic",
        "z": "30aaf3edcef601c3",
        "name": "",
        "operation": "OR",
        "inputCount": "3",
        "topic": "result",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "af10863f47d9a980"
            ]
        ]
    },
    {
        "id": "97e05a60955de621",
        "type": "function",
        "z": "30aaf3edcef601c3",
        "name": "Taupunkt berechnen",
        "func": "var temperature = msg.payload.Temperatur;\nvar humidity = msg.payload.Luftfeuchtigkeit;\n// Konstanten für die Magnus-Formel\nconst A = 17.27;\nconst B = 237.7; // in Grad Celsius\n\n// Berechnung des Sättigungsdampfdrucks\nconst alpha = (A * temperature) / (B + temperature) + Math.log(humidity / 100);\n\n// Berechnung des Taupunkts\nconst dewPoint = (B * alpha) / (A - alpha);\n\nmsg.payload = parseFloat(dewPoint.toFixed(2));\nmsg.topic = \"Taupunkt\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f338c9b4dbd44358",
        "type": "ui-gauge",
        "z": "30aaf3edcef601c3",
        "name": "Taupunkt",
        "group": "b09e345c96b25a66",
        "order": 3,
        "width": "4",
        "height": "4",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Taupunkt",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "15",
                "color": "#5cd65c"
            },
            {
                "from": "26",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1220,
        "y": 60,
        "wires": []
    },
    {
        "id": "7403c84c4fdae2e6",
        "type": "Tasmota Sensor",
        "z": "30aaf3edcef601c3",
        "broker": "0dfca726873e1d5f",
        "device": "humidor",
        "name": "Humidor",
        "outputs": 1,
        "uidisabler": false,
        "fullTopic": "",
        "cmndPrefix": "",
        "statPrefix": "",
        "telePrefix": "",
        "qos": "1",
        "retain": "false",
        "rules": [],
        "outputTopic": "",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "836ad6feafff03c8",
                "ed383602fa457f99",
                "2681fa3ecd6945bf",
                "db5acfdc2122e11a"
            ]
        ]
    },
    {
        "id": "ed383602fa457f99",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "Luftfeuchtigkeit",
        "rules": [
            {
                "t": "move",
                "p": "payload.AM2301.Humidity",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Luftfeuchtigkeit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 140,
        "wires": [
            [
                "86befdbe11d0a2e7",
                "9df8dd3a3dc3cba5",
                "e8582461a271dcaf"
            ]
        ]
    },
    {
        "id": "2681fa3ecd6945bf",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "Temperatur",
        "rules": [
            {
                "t": "move",
                "p": "payload.AM2301.Temperature",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Temperatur",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "7c4815dca905ecd0",
                "328d0867373e4905"
            ]
        ]
    },
    {
        "id": "db5acfdc2122e11a",
        "type": "change",
        "z": "30aaf3edcef601c3",
        "name": "Taupunkt",
        "rules": [
            {
                "t": "move",
                "p": "payload.AM2301.DewPoint",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Taupunkt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "a2cd2a264243aee4"
            ]
        ]
    },
    {
        "id": "a2cd2a264243aee4",
        "type": "rbe",
        "z": "30aaf3edcef601c3",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 60,
        "wires": [
            [
                "f338c9b4dbd44358"
            ]
        ]
    },
    {
        "id": "e8582461a271dcaf",
        "type": "rbe",
        "z": "30aaf3edcef601c3",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "a26199561e1293a3"
            ]
        ]
    },
    {
        "id": "328d0867373e4905",
        "type": "rbe",
        "z": "30aaf3edcef601c3",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "a26199561e1293a3"
            ]
        ]
    },
    {
        "id": "ceede262f965aceb",
        "type": "deconz-server",
        "name": "Phoscon-GW",
        "config_version": 1,
        "ip": "192.168.178.100",
        "port": "8080",
        "ws_port": "8443",
        "secure": false,
        "polling": "15"
    },
    {
        "id": "0dfca726873e1d5f",
        "type": "tasmota-mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "c42db77c4620d462",
        "type": "mqtt-broker",
        "name": "mosqitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "381f41de40b40333",
        "type": "ui-group",
        "name": "Klima",
        "page": "2bdd7bceafe9623a",
        "width": 4,
        "height": "4",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "54ed1fdbd65f445e",
        "type": "ui-group",
        "name": "Verlauf",
        "page": "e18b5a1119768438",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7eba8dcdd5856b41",
        "type": "ui-group",
        "name": "Gerätesteuerung",
        "page": "2bdd7bceafe9623a",
        "width": 2,
        "height": "4",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1ef18b1110bc55e6",
        "type": "ui-group",
        "name": "Nährlösung",
        "page": "2bdd7bceafe9623a",
        "width": 2,
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b0de33abd4914424",
        "type": "ui-group",
        "name": "Licht",
        "page": "2bdd7bceafe9623a",
        "width": 2,
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "25d83088be3ee194",
        "type": "ui-group",
        "name": "Gerätesteuerung 2",
        "page": "2bdd7bceafe9623a",
        "width": 2,
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "54774044299e8738",
        "type": "remote-config",
        "name": "Node-RED UI",
        "host": "localhost",
        "protocol": "http",
        "port": "1880",
        "baseurl": "/dashboard",
        "instancehash": "sd542jjmkicea7u1j6glzwdf1m47bmbzzgaswyw16o6wpcac342evqhk9riz000i",
        "server": "nodered02.remote-red.com",
        "region": "de"
    },
    {
        "id": "b86d63f3f59dd4c8",
        "type": "influxdb",
        "hostname": "192.168.178.100",
        "port": 8086,
        "protocol": "http",
        "database": "growbox",
        "name": "Growbox",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "305274af24bc1a26",
        "type": "mqtt-broker",
        "name": "RPi4 MQTT",
        "broker": "192.168.178.100",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b09e345c96b25a66",
        "type": "ui-group",
        "name": "Humidor",
        "page": "c511e58900326f74",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "53b781953102758d",
        "type": "ui-group",
        "name": "Verlauf",
        "page": "c511e58900326f74",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2bdd7bceafe9623a",
        "type": "ui-page",
        "name": "Growbox",
        "ui": "215d930e28adba77",
        "path": "/page4",
        "icon": "home",
        "layout": "grid",
        "theme": "bc56ba520646fe24",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e18b5a1119768438",
        "type": "ui-page",
        "name": "Verlauf",
        "ui": "215d930e28adba77",
        "path": "/page2",
        "icon": "home",
        "layout": "grid",
        "theme": "bc56ba520646fe24",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "c511e58900326f74",
        "type": "ui-page",
        "name": "Humidor",
        "ui": "215d930e28adba77",
        "path": "/page3",
        "icon": "home",
        "layout": "grid",
        "theme": "bc56ba520646fe24",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "215d930e28adba77",
        "type": "ui-base",
        "name": "Growbox",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": false,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control",
            "ui-gauge",
            "ui-chart"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 5,
        "showDisconnectNotification": true
    },
    {
        "id": "bc56ba520646fe24",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]